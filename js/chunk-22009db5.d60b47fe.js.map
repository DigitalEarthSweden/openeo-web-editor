{"version":3,"sources":["webpack:///./node_modules/ol/ViewHint.js","webpack:///./node_modules/ol/TileQueue.js","webpack:///./node_modules/ol/Tile.js","webpack:///./node_modules/ol/TileCache.js","webpack:///./node_modules/ol/ViewProperty.js","webpack:///./node_modules/ol/View.js","webpack:///./node_modules/ol/TileState.js","webpack:///./node_modules/ol/TileRange.js"],"names":["ANIMATING","INTERACTING","TileQueue","PriorityQueue","tilePriorityFunction","tileChangeCallback","call","this","element","apply","getKey","tileChangeCallback_","tilesLoading_","tilesLoadingKeys_","__proto__","prototype","Object","create","constructor","enqueue","added","tile","CHANGE","handleTileChange","getTilesLoading","event","state","getState","LOADED","ERROR","EMPTY","ABORT","tileKey","loadMoreTiles","maxTotalLoading","maxNewLoads","newLoads","abortedTiles","getCount","dequeue","IDLE","load","Tile","EventTarget","tileCoord","opt_options","options","interimTile","key","transition_","undefined","transition","transitionStarts_","changed","dispatchEvent","getInterimTile","refreshInterimChain","prev","LOADING","getTileCoord","setState","getAlpha","id","time","start","delta","inTransition","endTransition","TileCache","LRUCache","opt_highWaterMark","expireCache","usedTiles","canExpireCache","peekLast","zKey","toString","contains","pop","dispose","pruneExceptNewestZ","peekFirstKey","z","forEach","remove","CENTER","RESOLUTION","ROTATION","DEFAULT_MIN_ZOOM","BaseObject","View","hints_","animations_","updateAnimationKey_","updateAnimations_","bind","projection_","projection","applyOptions_","properties","ViewProperty","center","resolutionConstraintInfo","createResolutionConstraint","maxResolution_","maxResolution","minResolution_","minResolution","zoomFactor_","zoomFactor","resolutions_","resolutions","minZoom_","minZoom","centerConstraint","createCenterConstraint","resolutionConstraint","constraint","rotationConstraint","createRotationConstraint","constraints_","resolution","rotation","zoom","constrainResolution","Number","getResolution","setProperties","options_","getUpdatedOptions_","newOptions","getZoom","getCenter","getRotation","animate","var_args","callback","arguments$1","arguments","animationCount","length","isDef","setCenter","setZoom","setRotation","animationCallback","Date","now","slice","series","i","animation","complete","anchor","duration","easing","sourceCenter","targetCenter","sourceResolution","targetResolution","sourceRotation","Math","PI","targetRotation","isNoopAnimation","push","setHint","ViewHint","getAnimating","getInteracting","cancelAnimations","ii","cancelAnimationFrame","more","seriesComplete","j","jj","elapsed","fraction","progress","x0","y0","x1","y1","x","y","set","calculateCenterZoom","calculateCenterRotate","filter","Boolean","requestAnimationFrame","currentCenter","currentResolution","getSizeFromViewport_","size","selector","document","querySelector","metrics","getComputedStyle","parseInt","width","height","constrainCenter","opt_delta","opt_direction","direction","constrainRotation","get","getConstraints","getHints","opt_hints","calculateExtent","opt_size","getMaxResolution","getMinResolution","getMaxZoom","getZoomForResolution","setMaxZoom","maxZoom","getMinZoom","setMinZoom","getProjection","getResolutions","getResolutionForExtent","extent","xResolution","yResolution","max","getResolutionForValueFunction","opt_power","power","log","value","pow","getValueForResolutionFunction","pixelRatio","pixelResolution","round","offset","nearest","getResolutionForZoom","fit","geometryOrExtent","geometry","Array","isArray","getSimplifiedGeometry","getType","GeometryType","CIRCLE","getExtent","rotate","padding","coords","getFlatCoordinates","cosAngle","cos","sinAngle","sin","minRotX","Infinity","minRotY","maxRotX","maxRotY","stride","getStride","rotX","rotY","min","isNaN","constrainedResolution","centerRotX","centerRotY","centerX","centerY","setResolution","centerOn","coordinate","position","opt_anchor","hint","returnValue","setTimeout","defaultMaxZoom","defaultZoomFactor","Units","DEGREES","getMetersPerUnit","defaultMaxResolution","defaultMinResolution","floor","enableRotation","TileRange","minX","maxX","minY","maxY","createOrUpdate","tileRange","containsXY","containsTileRange","equals","extend","getHeight","getSize","getWidth","intersects"],"mappings":"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","file":"js/chunk-22009db5.d60b47fe.js","sourcesContent":["/**\n * @module ol/ViewHint\n */\n\n/**\n * @enum {number}\n */\nexport default {\n  ANIMATING: 0,\n  INTERACTING: 1\n};\n\n//# sourceMappingURL=ViewHint.js.map","/**\n * @module ol/TileQueue\n */\nimport TileState from './TileState.js';\nimport {listen, unlisten} from './events.js';\nimport EventType from './events/EventType.js';\nimport PriorityQueue from './structs/PriorityQueue.js';\n\n\n/**\n * @typedef {function(import(\"./Tile.js\").default, string, import(\"./coordinate.js\").Coordinate, number): number} PriorityFunction\n */\n\n\nvar TileQueue = /*@__PURE__*/(function (PriorityQueue) {\n  function TileQueue(tilePriorityFunction, tileChangeCallback) {\n\n    PriorityQueue.call(\n      /**\n       * @param {Array} element Element.\n       * @return {number} Priority.\n       */\n      this, function(element) {\n        return tilePriorityFunction.apply(null, element);\n      },\n      /**\n       * @param {Array} element Element.\n       * @return {string} Key.\n       */\n      function(element) {\n        return (/** @type {import(\"./Tile.js\").default} */ (element[0]).getKey());\n      });\n\n    /**\n     * @private\n     * @type {function(): ?}\n     */\n    this.tileChangeCallback_ = tileChangeCallback;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.tilesLoading_ = 0;\n\n    /**\n     * @private\n     * @type {!Object<string,boolean>}\n     */\n    this.tilesLoadingKeys_ = {};\n\n  }\n\n  if ( PriorityQueue ) TileQueue.__proto__ = PriorityQueue;\n  TileQueue.prototype = Object.create( PriorityQueue && PriorityQueue.prototype );\n  TileQueue.prototype.constructor = TileQueue;\n\n  /**\n   * @inheritDoc\n   */\n  TileQueue.prototype.enqueue = function enqueue (element) {\n    var added = PriorityQueue.prototype.enqueue.call(this, element);\n    if (added) {\n      var tile = element[0];\n      listen(tile, EventType.CHANGE, this.handleTileChange, this);\n    }\n    return added;\n  };\n\n  /**\n   * @return {number} Number of tiles loading.\n   */\n  TileQueue.prototype.getTilesLoading = function getTilesLoading () {\n    return this.tilesLoading_;\n  };\n\n  /**\n   * @param {import(\"./events/Event.js\").default} event Event.\n   * @protected\n   */\n  TileQueue.prototype.handleTileChange = function handleTileChange (event) {\n    var tile = /** @type {import(\"./Tile.js\").default} */ (event.target);\n    var state = tile.getState();\n    if (state === TileState.LOADED || state === TileState.ERROR ||\n        state === TileState.EMPTY || state === TileState.ABORT) {\n      unlisten(tile, EventType.CHANGE, this.handleTileChange, this);\n      var tileKey = tile.getKey();\n      if (tileKey in this.tilesLoadingKeys_) {\n        delete this.tilesLoadingKeys_[tileKey];\n        --this.tilesLoading_;\n      }\n      this.tileChangeCallback_();\n    }\n  };\n\n  /**\n   * @param {number} maxTotalLoading Maximum number tiles to load simultaneously.\n   * @param {number} maxNewLoads Maximum number of new tiles to load.\n   */\n  TileQueue.prototype.loadMoreTiles = function loadMoreTiles (maxTotalLoading, maxNewLoads) {\n    var newLoads = 0;\n    var abortedTiles = false;\n    var state, tile, tileKey;\n    while (this.tilesLoading_ < maxTotalLoading && newLoads < maxNewLoads &&\n           this.getCount() > 0) {\n      tile = /** @type {import(\"./Tile.js\").default} */ (this.dequeue()[0]);\n      tileKey = tile.getKey();\n      state = tile.getState();\n      if (state === TileState.ABORT) {\n        abortedTiles = true;\n      } else if (state === TileState.IDLE && !(tileKey in this.tilesLoadingKeys_)) {\n        this.tilesLoadingKeys_[tileKey] = true;\n        ++this.tilesLoading_;\n        ++newLoads;\n        tile.load();\n      }\n    }\n    if (newLoads === 0 && abortedTiles) {\n      // Do not stop the render loop when all wanted tiles were aborted due to\n      // a small, saturated tile cache.\n      this.tileChangeCallback_();\n    }\n  };\n\n  return TileQueue;\n}(PriorityQueue));\n\n\nexport default TileQueue;\n\n//# sourceMappingURL=TileQueue.js.map","/**\n * @module ol/Tile\n */\nimport TileState from './TileState.js';\nimport {easeIn} from './easing.js';\nimport EventTarget from './events/Target.js';\nimport EventType from './events/EventType.js';\n\n\n/**\n * A function that takes an {@link module:ol/Tile} for the tile and a\n * `{string}` for the url as arguments. The default is\n * ```js\n * source.setTileLoadFunction(function(tile, src) {\n *   tile.getImage().src = src;\n * });\n * ```\n * For more fine grained control, the load function can use fetch or XMLHttpRequest and involve\n * error handling:\n *\n * ```js\n * import TileState from 'ol/TileState';\n *\n * source.setTileLoadFunction(function(tile, src) {\n *   var xhr = new XMLHttpRequest();\n *   xhr.responseType = 'blob';\n *   xhr.addEventListener('loadend', function (evt) {\n *     var data = this.response;\n *     if (data !== undefined) {\n *       tile.getImage().src = URL.createObjectURL(data);\n *     } else {\n *       tile.setState(TileState.ERROR);\n *     }\n *   });\n *   xhr.addEventListener('error', function () {\n *     tile.setState(TileState.ERROR);\n *   });\n *   xhr.open('GET', src);\n *   xhr.send();\n * });\n * ```\n *\n * @typedef {function(Tile, string)} LoadFunction\n * @api\n */\n\n/**\n * {@link module:ol/source/Tile~Tile} sources use a function of this type to get\n * the url that provides a tile for a given tile coordinate.\n *\n * This function takes an {@link module:ol/tilecoord~TileCoord} for the tile\n * coordinate, a `{number}` representing the pixel ratio and a\n * {@link module:ol/proj/Projection} for the projection  as arguments\n * and returns a `{string}` representing the tile URL, or undefined if no tile\n * should be requested for the passed tile coordinate.\n *\n * @typedef {function(import(\"./tilecoord.js\").TileCoord, number,\n *           import(\"./proj/Projection.js\").default): (string|undefined)} UrlFunction\n * @api\n */\n\n\n/**\n * @typedef {Object} Options\n * @property {number} [transition=250] A duration for tile opacity\n * transitions in milliseconds. A duration of 0 disables the opacity transition.\n * @api\n */\n\n\n/**\n * @classdesc\n * Base class for tiles.\n *\n * @abstract\n */\nvar Tile = /*@__PURE__*/(function (EventTarget) {\n  function Tile(tileCoord, state, opt_options) {\n    EventTarget.call(this);\n\n    var options = opt_options ? opt_options : {};\n\n    /**\n     * @type {import(\"./tilecoord.js\").TileCoord}\n     */\n    this.tileCoord = tileCoord;\n\n    /**\n     * @protected\n     * @type {TileState}\n     */\n    this.state = state;\n\n    /**\n     * An \"interim\" tile for this tile. The interim tile may be used while this\n     * one is loading, for \"smooth\" transitions when changing params/dimensions\n     * on the source.\n     * @type {Tile}\n     */\n    this.interimTile = null;\n\n    /**\n     * A key assigned to the tile. This is used by the tile source to determine\n     * if this tile can effectively be used, or if a new tile should be created\n     * and this one be used as an interim tile for this new tile.\n     * @type {string}\n     */\n    this.key = '';\n\n    /**\n     * The duration for the opacity transition.\n     * @type {number}\n     */\n    this.transition_ = options.transition === undefined ? 250 : options.transition;\n\n    /**\n     * Lookup of start times for rendering transitions.  If the start time is\n     * equal to -1, the transition is complete.\n     * @type {Object<string, number>}\n     */\n    this.transitionStarts_ = {};\n\n  }\n\n  if ( EventTarget ) Tile.__proto__ = EventTarget;\n  Tile.prototype = Object.create( EventTarget && EventTarget.prototype );\n  Tile.prototype.constructor = Tile;\n\n  /**\n   * @protected\n   */\n  Tile.prototype.changed = function changed () {\n    this.dispatchEvent(EventType.CHANGE);\n  };\n\n  /**\n   * @return {string} Key.\n   */\n  Tile.prototype.getKey = function getKey () {\n    return this.key + '/' + this.tileCoord;\n  };\n\n  /**\n   * Get the interim tile most suitable for rendering using the chain of interim\n   * tiles. This corresponds to the  most recent tile that has been loaded, if no\n   * such tile exists, the original tile is returned.\n   * @return {!Tile} Best tile for rendering.\n   */\n  Tile.prototype.getInterimTile = function getInterimTile () {\n    if (!this.interimTile) {\n      //empty chain\n      return this;\n    }\n    var tile = this.interimTile;\n\n    // find the first loaded tile and return it. Since the chain is sorted in\n    // decreasing order of creation time, there is no need to search the remainder\n    // of the list (all those tiles correspond to older requests and will be\n    // cleaned up by refreshInterimChain)\n    do {\n      if (tile.getState() == TileState.LOADED) {\n        return tile;\n      }\n      tile = tile.interimTile;\n    } while (tile);\n\n    // we can not find a better tile\n    return this;\n  };\n\n  /**\n   * Goes through the chain of interim tiles and discards sections of the chain\n   * that are no longer relevant.\n   */\n  Tile.prototype.refreshInterimChain = function refreshInterimChain () {\n    if (!this.interimTile) {\n      return;\n    }\n\n    var tile = this.interimTile;\n    var prev = /** @type {Tile} */ (this);\n\n    do {\n      if (tile.getState() == TileState.LOADED) {\n        //we have a loaded tile, we can discard the rest of the list\n        //we would could abort any LOADING tile request\n        //older than this tile (i.e. any LOADING tile following this entry in the chain)\n        tile.interimTile = null;\n        break;\n      } else if (tile.getState() == TileState.LOADING) {\n        //keep this LOADING tile any loaded tiles later in the chain are\n        //older than this tile, so we're still interested in the request\n        prev = tile;\n      } else if (tile.getState() == TileState.IDLE) {\n        //the head of the list is the most current tile, we don't need\n        //to start any other requests for this chain\n        prev.interimTile = tile.interimTile;\n      } else {\n        prev = tile;\n      }\n      tile = prev.interimTile;\n    } while (tile);\n  };\n\n  /**\n   * Get the tile coordinate for this tile.\n   * @return {import(\"./tilecoord.js\").TileCoord} The tile coordinate.\n   * @api\n   */\n  Tile.prototype.getTileCoord = function getTileCoord () {\n    return this.tileCoord;\n  };\n\n  /**\n   * @return {TileState} State.\n   */\n  Tile.prototype.getState = function getState () {\n    return this.state;\n  };\n\n  /**\n   * Sets the state of this tile. If you write your own {@link module:ol/Tile~LoadFunction tileLoadFunction} ,\n   * it is important to set the state correctly to {@link module:ol/TileState~ERROR}\n   * when the tile cannot be loaded. Otherwise the tile cannot be removed from\n   * the tile queue and will block other requests.\n   * @param {TileState} state State.\n   * @api\n   */\n  Tile.prototype.setState = function setState (state) {\n    this.state = state;\n    this.changed();\n  };\n\n  /**\n   * Load the image or retry if loading previously failed.\n   * Loading is taken care of by the tile queue, and calling this method is\n   * only needed for preloading or for reloading in case of an error.\n   * @abstract\n   * @api\n   */\n  Tile.prototype.load = function load () {};\n\n  /**\n   * Get the alpha value for rendering.\n   * @param {string} id An id for the renderer.\n   * @param {number} time The render frame time.\n   * @return {number} A number between 0 and 1.\n   */\n  Tile.prototype.getAlpha = function getAlpha (id, time) {\n    if (!this.transition_) {\n      return 1;\n    }\n\n    var start = this.transitionStarts_[id];\n    if (!start) {\n      start = time;\n      this.transitionStarts_[id] = start;\n    } else if (start === -1) {\n      return 1;\n    }\n\n    var delta = time - start + (1000 / 60); // avoid rendering at 0\n    if (delta >= this.transition_) {\n      return 1;\n    }\n    return easeIn(delta / this.transition_);\n  };\n\n  /**\n   * Determine if a tile is in an alpha transition.  A tile is considered in\n   * transition if tile.getAlpha() has not yet been called or has been called\n   * and returned 1.\n   * @param {string} id An id for the renderer.\n   * @return {boolean} The tile is in transition.\n   */\n  Tile.prototype.inTransition = function inTransition (id) {\n    if (!this.transition_) {\n      return false;\n    }\n    return this.transitionStarts_[id] !== -1;\n  };\n\n  /**\n   * Mark a transition as complete.\n   * @param {string} id An id for the renderer.\n   */\n  Tile.prototype.endTransition = function endTransition (id) {\n    if (this.transition_) {\n      this.transitionStarts_[id] = -1;\n    }\n  };\n\n  return Tile;\n}(EventTarget));\n\n\nexport default Tile;\n\n//# sourceMappingURL=Tile.js.map","/**\n * @module ol/TileCache\n */\nimport LRUCache from './structs/LRUCache.js';\nimport {fromKey, getKey} from './tilecoord.js';\n\nvar TileCache = /*@__PURE__*/(function (LRUCache) {\n  function TileCache(opt_highWaterMark) {\n\n    LRUCache.call(this, opt_highWaterMark);\n\n  }\n\n  if ( LRUCache ) TileCache.__proto__ = LRUCache;\n  TileCache.prototype = Object.create( LRUCache && LRUCache.prototype );\n  TileCache.prototype.constructor = TileCache;\n\n  /**\n   * @param {!Object<string, import(\"./TileRange.js\").default>} usedTiles Used tiles.\n   */\n  TileCache.prototype.expireCache = function expireCache (usedTiles) {\n    while (this.canExpireCache()) {\n      var tile = this.peekLast();\n      var zKey = tile.tileCoord[0].toString();\n      if (zKey in usedTiles && usedTiles[zKey].contains(tile.tileCoord)) {\n        break;\n      } else {\n        this.pop().dispose();\n      }\n    }\n  };\n\n  /**\n   * Prune all tiles from the cache that don't have the same z as the newest tile.\n   */\n  TileCache.prototype.pruneExceptNewestZ = function pruneExceptNewestZ () {\n    if (this.getCount() === 0) {\n      return;\n    }\n    var key = this.peekFirstKey();\n    var tileCoord = fromKey(key);\n    var z = tileCoord[0];\n    this.forEach(function(tile) {\n      if (tile.tileCoord[0] !== z) {\n        this.remove(getKey(tile.tileCoord));\n        tile.dispose();\n      }\n    }, this);\n  };\n\n  return TileCache;\n}(LRUCache));\n\n\nexport default TileCache;\n\n//# sourceMappingURL=TileCache.js.map","/**\n * @module ol/ViewProperty\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  CENTER: 'center',\n  RESOLUTION: 'resolution',\n  ROTATION: 'rotation'\n};\n\n//# sourceMappingURL=ViewProperty.js.map","/**\n * @module ol/View\n */\nimport {DEFAULT_TILE_SIZE} from './tilegrid/common.js';\nimport {getUid} from './util.js';\nimport {VOID} from './functions.js';\nimport {createExtent, none as centerNone} from './centerconstraint.js';\nimport BaseObject from './Object.js';\nimport {createSnapToResolutions, createSnapToPower} from './resolutionconstraint.js';\nimport {createSnapToZero, createSnapToN, none as rotationNone, disable} from './rotationconstraint.js';\nimport ViewHint from './ViewHint.js';\nimport ViewProperty from './ViewProperty.js';\nimport {linearFindNearest} from './array.js';\nimport {assert} from './asserts.js';\nimport {add as addCoordinate, rotate as rotateCoordinate, equals as coordinatesEqual} from './coordinate.js';\nimport {inAndOut} from './easing.js';\nimport {getForViewAndSize, getCenter, getHeight, getWidth, isEmpty} from './extent.js';\nimport GeometryType from './geom/GeometryType.js';\nimport {fromExtent as polygonFromExtent} from './geom/Polygon.js';\nimport {clamp, modulo} from './math.js';\nimport {assign} from './obj.js';\nimport {createProjection, METERS_PER_UNIT} from './proj.js';\nimport Units from './proj/Units.js';\n\n\n/**\n * An animation configuration\n *\n * @typedef {Object} Animation\n * @property {import(\"./coordinate.js\").Coordinate} [sourceCenter]\n * @property {import(\"./coordinate.js\").Coordinate} [targetCenter]\n * @property {number} [sourceResolution]\n * @property {number} [targetResolution]\n * @property {number} [sourceRotation]\n * @property {number} [targetRotation]\n * @property {import(\"./coordinate.js\").Coordinate} [anchor]\n * @property {number} start\n * @property {number} duration\n * @property {boolean} complete\n * @property {function(number):number} easing\n * @property {function(boolean)} callback\n */\n\n\n/**\n * @typedef {Object} Constraints\n * @property {import(\"./centerconstraint.js\").Type} center\n * @property {import(\"./resolutionconstraint.js\").Type} resolution\n * @property {import(\"./rotationconstraint.js\").Type} rotation\n */\n\n\n/**\n * @typedef {Object} FitOptions\n * @property {import(\"./size.js\").Size} [size] The size in pixels of the box to fit\n * the extent into. Default is the current size of the first map in the DOM that\n * uses this view, or `[100, 100]` if no such map is found.\n * @property {!Array<number>} [padding=[0, 0, 0, 0]] Padding (in pixels) to be\n * cleared inside the view. Values in the array are top, right, bottom and left\n * padding.\n * @property {boolean} [constrainResolution=true] Constrain the resolution.\n * @property {boolean} [nearest=false] If `constrainResolution` is `true`, get\n * the nearest extent instead of the closest that actually fits the view.\n * @property {number} [minResolution=0] Minimum resolution that we zoom to.\n * @property {number} [maxZoom] Maximum zoom level that we zoom to. If\n * `minResolution` is given, this property is ignored.\n * @property {number} [duration] The duration of the animation in milliseconds.\n * By default, there is no animation to the target extent.\n * @property {function(number):number} [easing] The easing function used during\n * the animation (defaults to {@link module:ol/easing~inAndOut}).\n * The function will be called for each frame with a number representing a\n * fraction of the animation's duration.  The function should return a number\n * between 0 and 1 representing the progress toward the destination state.\n * @property {function(boolean)} [callback] Function called when the view is in\n * its final position. The callback will be called with `true` if the animation\n * series completed on its own or `false` if it was cancelled.\n */\n\n\n/**\n * @typedef {Object} ViewOptions\n * @property {import(\"./coordinate.js\").Coordinate} [center] The initial center for\n * the view. The coordinate system for the center is specified with the\n * `projection` option. Layer sources will not be fetched if this is not set,\n * but the center can be set later with {@link #setCenter}.\n * @property {boolean|number} [constrainRotation=true] Rotation constraint.\n * `false` means no constraint. `true` means no constraint, but snap to zero\n * near zero. A number constrains the rotation to that number of values. For\n * example, `4` will constrain the rotation to 0, 90, 180, and 270 degrees.\n * @property {boolean} [enableRotation=true] Enable rotation.\n * If `false`, a rotation constraint that always sets the rotation to zero is\n * used. The `constrainRotation` option has no effect if `enableRotation` is\n * `false`.\n * @property {import(\"./extent.js\").Extent} [extent] The extent that constrains the\n * center, in other words, center cannot be set outside this extent.\n * @property {number} [maxResolution] The maximum resolution used to determine\n * the resolution constraint. It is used together with `minResolution` (or\n * `maxZoom`) and `zoomFactor`. If unspecified it is calculated in such a way\n * that the projection's validity extent fits in a 256x256 px tile. If the\n * projection is Spherical Mercator (the default) then `maxResolution` defaults\n * to `40075016.68557849 / 256 = 156543.03392804097`.\n * @property {number} [minResolution] The minimum resolution used to determine\n * the resolution constraint.  It is used together with `maxResolution` (or\n * `minZoom`) and `zoomFactor`.  If unspecified it is calculated assuming 29\n * zoom levels (with a factor of 2). If the projection is Spherical Mercator\n * (the default) then `minResolution` defaults to\n * `40075016.68557849 / 256 / Math.pow(2, 28) = 0.0005831682455839253`.\n * @property {number} [maxZoom=28] The maximum zoom level used to determine the\n * resolution constraint. It is used together with `minZoom` (or\n * `maxResolution`) and `zoomFactor`.  Note that if `minResolution` is also\n * provided, it is given precedence over `maxZoom`.\n * @property {number} [minZoom=0] The minimum zoom level used to determine the\n * resolution constraint. It is used together with `maxZoom` (or\n * `minResolution`) and `zoomFactor`.  Note that if `maxResolution` is also\n * provided, it is given precedence over `minZoom`.\n * @property {import(\"./proj.js\").ProjectionLike} [projection='EPSG:3857'] The\n * projection. The default is Spherical Mercator.\n * @property {number} [resolution] The initial resolution for the view. The\n * units are `projection` units per pixel (e.g. meters per pixel). An\n * alternative to setting this is to set `zoom`. Layer sources will not be\n * fetched if neither this nor `zoom` are defined, but they can be set later\n * with {@link #setZoom} or {@link #setResolution}.\n * @property {Array<number>} [resolutions] Resolutions to determine the\n * resolution constraint. If set the `maxResolution`, `minResolution`,\n * `minZoom`, `maxZoom`, and `zoomFactor` options are ignored.\n * @property {number} [rotation=0] The initial rotation for the view in radians\n * (positive rotation clockwise, 0 means North).\n * @property {number} [zoom] Only used if `resolution` is not defined. Zoom\n * level used to calculate the initial resolution for the view. The initial\n * resolution is determined using the {@link #constrainResolution} method.\n * @property {number} [zoomFactor=2] The zoom factor used to determine the\n * resolution constraint.\n */\n\n\n/**\n * @typedef {Object} AnimationOptions\n * @property {import(\"./coordinate.js\").Coordinate} [center] The center of the view at the end of\n * the animation.\n * @property {number} [zoom] The zoom level of the view at the end of the\n * animation. This takes precedence over `resolution`.\n * @property {number} [resolution] The resolution of the view at the end\n * of the animation.  If `zoom` is also provided, this option will be ignored.\n * @property {number} [rotation] The rotation of the view at the end of\n * the animation.\n * @property {import(\"./coordinate.js\").Coordinate} [anchor] Optional anchor to remained fixed\n * during a rotation or resolution animation.\n * @property {number} [duration=1000] The duration of the animation in milliseconds.\n * @property {function(number):number} [easing] The easing function used\n * during the animation (defaults to {@link module:ol/easing~inAndOut}).\n * The function will be called for each frame with a number representing a\n * fraction of the animation's duration.  The function should return a number\n * between 0 and 1 representing the progress toward the destination state.\n */\n\n\n/**\n * @typedef {Object} State\n * @property {import(\"./coordinate.js\").Coordinate} center\n * @property {import(\"./proj/Projection.js\").default} projection\n * @property {number} resolution\n * @property {number} rotation\n * @property {number} zoom\n */\n\n\n/**\n * Default min zoom level for the map view.\n * @type {number}\n */\nvar DEFAULT_MIN_ZOOM = 0;\n\n\n/**\n * @classdesc\n * A View object represents a simple 2D view of the map.\n *\n * This is the object to act upon to change the center, resolution,\n * and rotation of the map.\n *\n * ### The view states\n *\n * An View is determined by three states: `center`, `resolution`,\n * and `rotation`. Each state has a corresponding getter and setter, e.g.\n * `getCenter` and `setCenter` for the `center` state.\n *\n * An View has a `projection`. The projection determines the\n * coordinate system of the center, and its units determine the units of the\n * resolution (projection units per pixel). The default projection is\n * Spherical Mercator (EPSG:3857).\n *\n * ### The constraints\n *\n * `setCenter`, `setResolution` and `setRotation` can be used to change the\n * states of the view. Any value can be passed to the setters. And the value\n * that is passed to a setter will effectively be the value set in the view,\n * and returned by the corresponding getter.\n *\n * But a View object also has a *resolution constraint*, a\n * *rotation constraint* and a *center constraint*.\n *\n * As said above, no constraints are applied when the setters are used to set\n * new states for the view. Applying constraints is done explicitly through\n * the use of the `constrain*` functions (`constrainResolution` and\n * `constrainRotation` and `constrainCenter`).\n *\n * The main users of the constraints are the interactions and the\n * controls. For example, double-clicking on the map changes the view to\n * the \"next\" resolution. And releasing the fingers after pinch-zooming\n * snaps to the closest resolution (with an animation).\n *\n * The *resolution constraint* snaps to specific resolutions. It is\n * determined by the following options: `resolutions`, `maxResolution`,\n * `maxZoom`, and `zoomFactor`. If `resolutions` is set, the other three\n * options are ignored. See documentation for each option for more\n * information.\n *\n * The *rotation constraint* snaps to specific angles. It is determined\n * by the following options: `enableRotation` and `constrainRotation`.\n * By default the rotation value is snapped to zero when approaching the\n * horizontal.\n *\n * The *center constraint* is determined by the `extent` option. By\n * default the center is not constrained at all.\n *\n  * @api\n */\nvar View = /*@__PURE__*/(function (BaseObject) {\n  function View(opt_options) {\n    BaseObject.call(this);\n\n    var options = assign({}, opt_options);\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.hints_ = [0, 0];\n\n    /**\n     * @private\n     * @type {Array<Array<Animation>>}\n     */\n    this.animations_ = [];\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.updateAnimationKey_;\n\n    this.updateAnimations_ = this.updateAnimations_.bind(this);\n\n    /**\n     * @private\n     * @const\n     * @type {import(\"./proj/Projection.js\").default}\n     */\n    this.projection_ = createProjection(options.projection, 'EPSG:3857');\n\n    this.applyOptions_(options);\n  }\n\n  if ( BaseObject ) View.__proto__ = BaseObject;\n  View.prototype = Object.create( BaseObject && BaseObject.prototype );\n  View.prototype.constructor = View;\n\n  /**\n   * Set up the view with the given options.\n   * @param {ViewOptions} options View options.\n   */\n  View.prototype.applyOptions_ = function applyOptions_ (options) {\n\n    /**\n     * @type {Object<string, *>}\n     */\n    var properties = {};\n    properties[ViewProperty.CENTER] = options.center !== undefined ?\n      options.center : null;\n\n    var resolutionConstraintInfo = createResolutionConstraint(options);\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxResolution_ = resolutionConstraintInfo.maxResolution;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.minResolution_ = resolutionConstraintInfo.minResolution;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.zoomFactor_ = resolutionConstraintInfo.zoomFactor;\n\n    /**\n     * @private\n     * @type {Array<number>|undefined}\n     */\n    this.resolutions_ = options.resolutions;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.minZoom_ = resolutionConstraintInfo.minZoom;\n\n    var centerConstraint = createCenterConstraint(options);\n    var resolutionConstraint = resolutionConstraintInfo.constraint;\n    var rotationConstraint = createRotationConstraint(options);\n\n    /**\n     * @private\n     * @type {Constraints}\n     */\n    this.constraints_ = {\n      center: centerConstraint,\n      resolution: resolutionConstraint,\n      rotation: rotationConstraint\n    };\n\n    if (options.resolution !== undefined) {\n      properties[ViewProperty.RESOLUTION] = options.resolution;\n    } else if (options.zoom !== undefined) {\n      properties[ViewProperty.RESOLUTION] = this.constrainResolution(\n        this.maxResolution_, options.zoom - this.minZoom_);\n\n      if (this.resolutions_) { // in case map zoom is out of min/max zoom range\n        properties[ViewProperty.RESOLUTION] = clamp(\n          Number(this.getResolution() || properties[ViewProperty.RESOLUTION]),\n          this.minResolution_, this.maxResolution_);\n      }\n    }\n    properties[ViewProperty.ROTATION] = options.rotation !== undefined ? options.rotation : 0;\n    this.setProperties(properties);\n\n    /**\n     * @private\n     * @type {ViewOptions}\n     */\n    this.options_ = options;\n\n  };\n\n  /**\n   * Get an updated version of the view options used to construct the view.  The\n   * current resolution (or zoom), center, and rotation are applied to any stored\n   * options.  The provided options can be used to apply new min/max zoom or\n   * resolution limits.\n   * @param {ViewOptions} newOptions New options to be applied.\n   * @return {ViewOptions} New options updated with the current view state.\n   */\n  View.prototype.getUpdatedOptions_ = function getUpdatedOptions_ (newOptions) {\n    var options = assign({}, this.options_);\n\n    // preserve resolution (or zoom)\n    if (options.resolution !== undefined) {\n      options.resolution = this.getResolution();\n    } else {\n      options.zoom = this.getZoom();\n    }\n\n    // preserve center\n    options.center = this.getCenter();\n\n    // preserve rotation\n    options.rotation = this.getRotation();\n\n    return assign({}, options, newOptions);\n  };\n\n  /**\n   * Animate the view.  The view's center, zoom (or resolution), and rotation\n   * can be animated for smooth transitions between view states.  For example,\n   * to animate the view to a new zoom level:\n   *\n   *     view.animate({zoom: view.getZoom() + 1});\n   *\n   * By default, the animation lasts one second and uses in-and-out easing.  You\n   * can customize this behavior by including `duration` (in milliseconds) and\n   * `easing` options (see {@link module:ol/easing}).\n   *\n   * To chain together multiple animations, call the method with multiple\n   * animation objects.  For example, to first zoom and then pan:\n   *\n   *     view.animate({zoom: 10}, {center: [0, 0]});\n   *\n   * If you provide a function as the last argument to the animate method, it\n   * will get called at the end of an animation series.  The callback will be\n   * called with `true` if the animation series completed on its own or `false`\n   * if it was cancelled.\n   *\n   * Animations are cancelled by user interactions (e.g. dragging the map) or by\n   * calling `view.setCenter()`, `view.setResolution()`, or `view.setRotation()`\n   * (or another method that calls one of these).\n   *\n   * @param {...(AnimationOptions|function(boolean))} var_args Animation\n   *     options.  Multiple animations can be run in series by passing multiple\n   *     options objects.  To run multiple animations in parallel, call the method\n   *     multiple times.  An optional callback can be provided as a final\n   *     argument.  The callback will be called with a boolean indicating whether\n   *     the animation completed without being cancelled.\n   * @api\n   */\n  View.prototype.animate = function animate (var_args) {\n    var arguments$1 = arguments;\n\n    var animationCount = arguments.length;\n    var callback;\n    if (animationCount > 1 && typeof arguments[animationCount - 1] === 'function') {\n      callback = arguments[animationCount - 1];\n      --animationCount;\n    }\n    if (!this.isDef()) {\n      // if view properties are not yet set, shortcut to the final state\n      var state = arguments[animationCount - 1];\n      if (state.center) {\n        this.setCenter(state.center);\n      }\n      if (state.zoom !== undefined) {\n        this.setZoom(state.zoom);\n      }\n      if (state.rotation !== undefined) {\n        this.setRotation(state.rotation);\n      }\n      if (callback) {\n        animationCallback(callback, true);\n      }\n      return;\n    }\n    var start = Date.now();\n    var center = this.getCenter().slice();\n    var resolution = this.getResolution();\n    var rotation = this.getRotation();\n    var series = [];\n    for (var i = 0; i < animationCount; ++i) {\n      var options = /** @type {AnimationOptions} */ (arguments$1[i]);\n\n      var animation = /** @type {Animation} */ ({\n        start: start,\n        complete: false,\n        anchor: options.anchor,\n        duration: options.duration !== undefined ? options.duration : 1000,\n        easing: options.easing || inAndOut\n      });\n\n      if (options.center) {\n        animation.sourceCenter = center;\n        animation.targetCenter = options.center;\n        center = animation.targetCenter;\n      }\n\n      if (options.zoom !== undefined) {\n        animation.sourceResolution = resolution;\n        animation.targetResolution = this.constrainResolution(\n          this.maxResolution_, options.zoom - this.minZoom_, 0);\n        resolution = animation.targetResolution;\n      } else if (options.resolution) {\n        animation.sourceResolution = resolution;\n        animation.targetResolution = options.resolution;\n        resolution = animation.targetResolution;\n      }\n\n      if (options.rotation !== undefined) {\n        animation.sourceRotation = rotation;\n        var delta = modulo(options.rotation - rotation + Math.PI, 2 * Math.PI) - Math.PI;\n        animation.targetRotation = rotation + delta;\n        rotation = animation.targetRotation;\n      }\n\n      animation.callback = callback;\n\n      // check if animation is a no-op\n      if (isNoopAnimation(animation)) {\n        animation.complete = true;\n        // we still push it onto the series for callback handling\n      } else {\n        start += animation.duration;\n      }\n      series.push(animation);\n    }\n    this.animations_.push(series);\n    this.setHint(ViewHint.ANIMATING, 1);\n    this.updateAnimations_();\n  };\n\n  /**\n   * Determine if the view is being animated.\n   * @return {boolean} The view is being animated.\n   * @api\n   */\n  View.prototype.getAnimating = function getAnimating () {\n    return this.hints_[ViewHint.ANIMATING] > 0;\n  };\n\n  /**\n   * Determine if the user is interacting with the view, such as panning or zooming.\n   * @return {boolean} The view is being interacted with.\n   * @api\n   */\n  View.prototype.getInteracting = function getInteracting () {\n    return this.hints_[ViewHint.INTERACTING] > 0;\n  };\n\n  /**\n   * Cancel any ongoing animations.\n   * @api\n   */\n  View.prototype.cancelAnimations = function cancelAnimations () {\n    this.setHint(ViewHint.ANIMATING, -this.hints_[ViewHint.ANIMATING]);\n    for (var i = 0, ii = this.animations_.length; i < ii; ++i) {\n      var series = this.animations_[i];\n      if (series[0].callback) {\n        animationCallback(series[0].callback, false);\n      }\n    }\n    this.animations_.length = 0;\n  };\n\n  /**\n   * Update all animations.\n   */\n  View.prototype.updateAnimations_ = function updateAnimations_ () {\n    if (this.updateAnimationKey_ !== undefined) {\n      cancelAnimationFrame(this.updateAnimationKey_);\n      this.updateAnimationKey_ = undefined;\n    }\n    if (!this.getAnimating()) {\n      return;\n    }\n    var now = Date.now();\n    var more = false;\n    for (var i = this.animations_.length - 1; i >= 0; --i) {\n      var series = this.animations_[i];\n      var seriesComplete = true;\n      for (var j = 0, jj = series.length; j < jj; ++j) {\n        var animation = series[j];\n        if (animation.complete) {\n          continue;\n        }\n        var elapsed = now - animation.start;\n        var fraction = animation.duration > 0 ? elapsed / animation.duration : 1;\n        if (fraction >= 1) {\n          animation.complete = true;\n          fraction = 1;\n        } else {\n          seriesComplete = false;\n        }\n        var progress = animation.easing(fraction);\n        if (animation.sourceCenter) {\n          var x0 = animation.sourceCenter[0];\n          var y0 = animation.sourceCenter[1];\n          var x1 = animation.targetCenter[0];\n          var y1 = animation.targetCenter[1];\n          var x = x0 + progress * (x1 - x0);\n          var y = y0 + progress * (y1 - y0);\n          this.set(ViewProperty.CENTER, [x, y]);\n        }\n        if (animation.sourceResolution && animation.targetResolution) {\n          var resolution = progress === 1 ?\n            animation.targetResolution :\n            animation.sourceResolution + progress * (animation.targetResolution - animation.sourceResolution);\n          if (animation.anchor) {\n            this.set(ViewProperty.CENTER,\n              this.calculateCenterZoom(resolution, animation.anchor));\n          }\n          this.set(ViewProperty.RESOLUTION, resolution);\n        }\n        if (animation.sourceRotation !== undefined && animation.targetRotation !== undefined) {\n          var rotation = progress === 1 ?\n            modulo(animation.targetRotation + Math.PI, 2 * Math.PI) - Math.PI :\n            animation.sourceRotation + progress * (animation.targetRotation - animation.sourceRotation);\n          if (animation.anchor) {\n            this.set(ViewProperty.CENTER,\n              this.calculateCenterRotate(rotation, animation.anchor));\n          }\n          this.set(ViewProperty.ROTATION, rotation);\n        }\n        more = true;\n        if (!animation.complete) {\n          break;\n        }\n      }\n      if (seriesComplete) {\n        this.animations_[i] = null;\n        this.setHint(ViewHint.ANIMATING, -1);\n        var callback = series[0].callback;\n        if (callback) {\n          animationCallback(callback, true);\n        }\n      }\n    }\n    // prune completed series\n    this.animations_ = this.animations_.filter(Boolean);\n    if (more && this.updateAnimationKey_ === undefined) {\n      this.updateAnimationKey_ = requestAnimationFrame(this.updateAnimations_);\n    }\n  };\n\n  /**\n   * @param {number} rotation Target rotation.\n   * @param {import(\"./coordinate.js\").Coordinate} anchor Rotation anchor.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} Center for rotation and anchor.\n   */\n  View.prototype.calculateCenterRotate = function calculateCenterRotate (rotation, anchor) {\n    var center;\n    var currentCenter = this.getCenter();\n    if (currentCenter !== undefined) {\n      center = [currentCenter[0] - anchor[0], currentCenter[1] - anchor[1]];\n      rotateCoordinate(center, rotation - this.getRotation());\n      addCoordinate(center, anchor);\n    }\n    return center;\n  };\n\n  /**\n   * @param {number} resolution Target resolution.\n   * @param {import(\"./coordinate.js\").Coordinate} anchor Zoom anchor.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} Center for resolution and anchor.\n   */\n  View.prototype.calculateCenterZoom = function calculateCenterZoom (resolution, anchor) {\n    var center;\n    var currentCenter = this.getCenter();\n    var currentResolution = this.getResolution();\n    if (currentCenter !== undefined && currentResolution !== undefined) {\n      var x = anchor[0] - resolution * (anchor[0] - currentCenter[0]) / currentResolution;\n      var y = anchor[1] - resolution * (anchor[1] - currentCenter[1]) / currentResolution;\n      center = [x, y];\n    }\n    return center;\n  };\n\n  /**\n   * @private\n   * @return {import(\"./size.js\").Size} Viewport size or `[100, 100]` when no viewport is found.\n   */\n  View.prototype.getSizeFromViewport_ = function getSizeFromViewport_ () {\n    var size = [100, 100];\n    var selector = '.ol-viewport[data-view=\"' + getUid(this) + '\"]';\n    var element = document.querySelector(selector);\n    if (element) {\n      var metrics = getComputedStyle(element);\n      size[0] = parseInt(metrics.width, 10);\n      size[1] = parseInt(metrics.height, 10);\n    }\n    return size;\n  };\n\n  /**\n   * Get the constrained center of this view.\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} center Center.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} Constrained center.\n   * @api\n   */\n  View.prototype.constrainCenter = function constrainCenter (center) {\n    return this.constraints_.center(center);\n  };\n\n  /**\n   * Get the constrained resolution of this view.\n   * @param {number|undefined} resolution Resolution.\n   * @param {number=} opt_delta Delta. Default is `0`.\n   * @param {number=} opt_direction Direction. Default is `0`.\n   * @return {number|undefined} Constrained resolution.\n   * @api\n   */\n  View.prototype.constrainResolution = function constrainResolution (resolution, opt_delta, opt_direction) {\n    var delta = opt_delta || 0;\n    var direction = opt_direction || 0;\n    return this.constraints_.resolution(resolution, delta, direction);\n  };\n\n  /**\n   * Get the constrained rotation of this view.\n   * @param {number|undefined} rotation Rotation.\n   * @param {number=} opt_delta Delta. Default is `0`.\n   * @return {number|undefined} Constrained rotation.\n   * @api\n   */\n  View.prototype.constrainRotation = function constrainRotation (rotation, opt_delta) {\n    var delta = opt_delta || 0;\n    return this.constraints_.rotation(rotation, delta);\n  };\n\n  /**\n   * Get the view center.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The center of the view.\n   * @observable\n   * @api\n   */\n  View.prototype.getCenter = function getCenter () {\n    return (\n      /** @type {import(\"./coordinate.js\").Coordinate|undefined} */ (this.get(ViewProperty.CENTER))\n    );\n  };\n\n  /**\n   * @return {Constraints} Constraints.\n   */\n  View.prototype.getConstraints = function getConstraints () {\n    return this.constraints_;\n  };\n\n  /**\n   * @param {Array<number>=} opt_hints Destination array.\n   * @return {Array<number>} Hint.\n   */\n  View.prototype.getHints = function getHints (opt_hints) {\n    if (opt_hints !== undefined) {\n      opt_hints[0] = this.hints_[0];\n      opt_hints[1] = this.hints_[1];\n      return opt_hints;\n    } else {\n      return this.hints_.slice();\n    }\n  };\n\n  /**\n   * Calculate the extent for the current view state and the passed size.\n   * The size is the pixel dimensions of the box into which the calculated extent\n   * should fit. In most cases you want to get the extent of the entire map,\n   * that is `map.getSize()`.\n   * @param {import(\"./size.js\").Size=} opt_size Box pixel size. If not provided, the size of the\n   * first map that uses this view will be used.\n   * @return {import(\"./extent.js\").Extent} Extent.\n   * @api\n   */\n  View.prototype.calculateExtent = function calculateExtent (opt_size) {\n    var size = opt_size || this.getSizeFromViewport_();\n    var center = /** @type {!import(\"./coordinate.js\").Coordinate} */ (this.getCenter());\n    assert(center, 1); // The view center is not defined\n    var resolution = /** @type {!number} */ (this.getResolution());\n    assert(resolution !== undefined, 2); // The view resolution is not defined\n    var rotation = /** @type {!number} */ (this.getRotation());\n    assert(rotation !== undefined, 3); // The view rotation is not defined\n\n    return getForViewAndSize(center, resolution, rotation, size);\n  };\n\n  /**\n   * Get the maximum resolution of the view.\n   * @return {number} The maximum resolution of the view.\n   * @api\n   */\n  View.prototype.getMaxResolution = function getMaxResolution () {\n    return this.maxResolution_;\n  };\n\n  /**\n   * Get the minimum resolution of the view.\n   * @return {number} The minimum resolution of the view.\n   * @api\n   */\n  View.prototype.getMinResolution = function getMinResolution () {\n    return this.minResolution_;\n  };\n\n  /**\n   * Get the maximum zoom level for the view.\n   * @return {number} The maximum zoom level.\n   * @api\n   */\n  View.prototype.getMaxZoom = function getMaxZoom () {\n    return /** @type {number} */ (this.getZoomForResolution(this.minResolution_));\n  };\n\n  /**\n   * Set a new maximum zoom level for the view.\n   * @param {number} zoom The maximum zoom level.\n   * @api\n   */\n  View.prototype.setMaxZoom = function setMaxZoom (zoom) {\n    this.applyOptions_(this.getUpdatedOptions_({maxZoom: zoom}));\n  };\n\n  /**\n   * Get the minimum zoom level for the view.\n   * @return {number} The minimum zoom level.\n   * @api\n   */\n  View.prototype.getMinZoom = function getMinZoom () {\n    return /** @type {number} */ (this.getZoomForResolution(this.maxResolution_));\n  };\n\n  /**\n   * Set a new minimum zoom level for the view.\n   * @param {number} zoom The minimum zoom level.\n   * @api\n   */\n  View.prototype.setMinZoom = function setMinZoom (zoom) {\n    this.applyOptions_(this.getUpdatedOptions_({minZoom: zoom}));\n  };\n\n  /**\n   * Get the view projection.\n   * @return {import(\"./proj/Projection.js\").default} The projection of the view.\n   * @api\n   */\n  View.prototype.getProjection = function getProjection () {\n    return this.projection_;\n  };\n\n  /**\n   * Get the view resolution.\n   * @return {number|undefined} The resolution of the view.\n   * @observable\n   * @api\n   */\n  View.prototype.getResolution = function getResolution () {\n    return /** @type {number|undefined} */ (this.get(ViewProperty.RESOLUTION));\n  };\n\n  /**\n   * Get the resolutions for the view. This returns the array of resolutions\n   * passed to the constructor of the View, or undefined if none were given.\n   * @return {Array<number>|undefined} The resolutions of the view.\n   * @api\n   */\n  View.prototype.getResolutions = function getResolutions () {\n    return this.resolutions_;\n  };\n\n  /**\n   * Get the resolution for a provided extent (in map units) and size (in pixels).\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {import(\"./size.js\").Size=} opt_size Box pixel size.\n   * @return {number} The resolution at which the provided extent will render at\n   *     the given size.\n   * @api\n   */\n  View.prototype.getResolutionForExtent = function getResolutionForExtent (extent, opt_size) {\n    var size = opt_size || this.getSizeFromViewport_();\n    var xResolution = getWidth(extent) / size[0];\n    var yResolution = getHeight(extent) / size[1];\n    return Math.max(xResolution, yResolution);\n  };\n\n  /**\n   * Return a function that returns a value between 0 and 1 for a\n   * resolution. Exponential scaling is assumed.\n   * @param {number=} opt_power Power.\n   * @return {function(number): number} Resolution for value function.\n   */\n  View.prototype.getResolutionForValueFunction = function getResolutionForValueFunction (opt_power) {\n    var power = opt_power || 2;\n    var maxResolution = this.maxResolution_;\n    var minResolution = this.minResolution_;\n    var max = Math.log(maxResolution / minResolution) / Math.log(power);\n    return (\n      /**\n       * @param {number} value Value.\n       * @return {number} Resolution.\n       */\n      function(value) {\n        var resolution = maxResolution / Math.pow(power, value * max);\n        return resolution;\n      });\n  };\n\n  /**\n   * Get the view rotation.\n   * @return {number} The rotation of the view in radians.\n   * @observable\n   * @api\n   */\n  View.prototype.getRotation = function getRotation () {\n    return /** @type {number} */ (this.get(ViewProperty.ROTATION));\n  };\n\n  /**\n   * Return a function that returns a resolution for a value between\n   * 0 and 1. Exponential scaling is assumed.\n   * @param {number=} opt_power Power.\n   * @return {function(number): number} Value for resolution function.\n   */\n  View.prototype.getValueForResolutionFunction = function getValueForResolutionFunction (opt_power) {\n    var power = opt_power || 2;\n    var maxResolution = this.maxResolution_;\n    var minResolution = this.minResolution_;\n    var max = Math.log(maxResolution / minResolution) / Math.log(power);\n    return (\n      /**\n       * @param {number} resolution Resolution.\n       * @return {number} Value.\n       */\n      function(resolution) {\n        var value = (Math.log(maxResolution / resolution) / Math.log(power)) / max;\n        return value;\n      });\n  };\n\n  /**\n   * @param {number} pixelRatio Pixel ratio for center rounding.\n   * @return {State} View state.\n   */\n  View.prototype.getState = function getState (pixelRatio) {\n    var center = /** @type {import(\"./coordinate.js\").Coordinate} */ (this.getCenter());\n    var projection = this.getProjection();\n    var resolution = /** @type {number} */ (this.getResolution());\n    var pixelResolution = resolution / pixelRatio;\n    var rotation = this.getRotation();\n    return (\n      /** @type {State} */ ({\n        center: [\n          Math.round(center[0] / pixelResolution) * pixelResolution,\n          Math.round(center[1] / pixelResolution) * pixelResolution\n        ],\n        projection: projection !== undefined ? projection : null,\n        resolution: resolution,\n        rotation: rotation,\n        zoom: this.getZoom()\n      })\n    );\n  };\n\n  /**\n   * Get the current zoom level.  If you configured your view with a resolutions\n   * array (this is rare), this method may return non-integer zoom levels (so\n   * the zoom level is not safe to use as an index into a resolutions array).\n   * @return {number|undefined} Zoom.\n   * @api\n   */\n  View.prototype.getZoom = function getZoom () {\n    var zoom;\n    var resolution = this.getResolution();\n    if (resolution !== undefined) {\n      zoom = this.getZoomForResolution(resolution);\n    }\n    return zoom;\n  };\n\n  /**\n   * Get the zoom level for a resolution.\n   * @param {number} resolution The resolution.\n   * @return {number|undefined} The zoom level for the provided resolution.\n   * @api\n   */\n  View.prototype.getZoomForResolution = function getZoomForResolution (resolution) {\n    var offset = this.minZoom_ || 0;\n    var max, zoomFactor;\n    if (this.resolutions_) {\n      var nearest = linearFindNearest(this.resolutions_, resolution, 1);\n      offset = nearest;\n      max = this.resolutions_[nearest];\n      if (nearest == this.resolutions_.length - 1) {\n        zoomFactor = 2;\n      } else {\n        zoomFactor = max / this.resolutions_[nearest + 1];\n      }\n    } else {\n      max = this.maxResolution_;\n      zoomFactor = this.zoomFactor_;\n    }\n    return offset + Math.log(max / resolution) / Math.log(zoomFactor);\n  };\n\n  /**\n   * Get the resolution for a zoom level.\n   * @param {number} zoom Zoom level.\n   * @return {number} The view resolution for the provided zoom level.\n   * @api\n   */\n  View.prototype.getResolutionForZoom = function getResolutionForZoom (zoom) {\n    return /** @type {number} */ (this.constrainResolution(\n      this.maxResolution_, zoom - this.minZoom_, 0));\n  };\n\n  /**\n   * Fit the given geometry or extent based on the given map size and border.\n   * The size is pixel dimensions of the box to fit the extent into.\n   * In most cases you will want to use the map size, that is `map.getSize()`.\n   * Takes care of the map angle.\n   * @param {import(\"./geom/SimpleGeometry.js\").default|import(\"./extent.js\").Extent} geometryOrExtent The geometry or\n   *     extent to fit the view to.\n   * @param {FitOptions=} opt_options Options.\n   * @api\n   */\n  View.prototype.fit = function fit (geometryOrExtent, opt_options) {\n    var options = opt_options || {};\n    var size = options.size;\n    if (!size) {\n      size = this.getSizeFromViewport_();\n    }\n    /** @type {import(\"./geom/SimpleGeometry.js\").default} */\n    var geometry;\n    assert(Array.isArray(geometryOrExtent) || typeof /** @type {?} */ (geometryOrExtent).getSimplifiedGeometry === 'function',\n      24); // Invalid extent or geometry provided as `geometry`\n    if (Array.isArray(geometryOrExtent)) {\n      assert(!isEmpty(geometryOrExtent),\n        25); // Cannot fit empty extent provided as `geometry`\n      geometry = polygonFromExtent(geometryOrExtent);\n    } else if (geometryOrExtent.getType() === GeometryType.CIRCLE) {\n      geometryOrExtent = geometryOrExtent.getExtent();\n      geometry = polygonFromExtent(geometryOrExtent);\n      geometry.rotate(this.getRotation(), getCenter(geometryOrExtent));\n    } else {\n      geometry = geometryOrExtent;\n    }\n\n    var padding = options.padding !== undefined ? options.padding : [0, 0, 0, 0];\n    var constrainResolution = options.constrainResolution !== undefined ?\n      options.constrainResolution : true;\n    var nearest = options.nearest !== undefined ? options.nearest : false;\n    var minResolution;\n    if (options.minResolution !== undefined) {\n      minResolution = options.minResolution;\n    } else if (options.maxZoom !== undefined) {\n      minResolution = this.constrainResolution(\n        this.maxResolution_, options.maxZoom - this.minZoom_, 0);\n    } else {\n      minResolution = 0;\n    }\n    var coords = geometry.getFlatCoordinates();\n\n    // calculate rotated extent\n    var rotation = this.getRotation();\n    var cosAngle = Math.cos(-rotation);\n    var sinAngle = Math.sin(-rotation);\n    var minRotX = +Infinity;\n    var minRotY = +Infinity;\n    var maxRotX = -Infinity;\n    var maxRotY = -Infinity;\n    var stride = geometry.getStride();\n    for (var i = 0, ii = coords.length; i < ii; i += stride) {\n      var rotX = coords[i] * cosAngle - coords[i + 1] * sinAngle;\n      var rotY = coords[i] * sinAngle + coords[i + 1] * cosAngle;\n      minRotX = Math.min(minRotX, rotX);\n      minRotY = Math.min(minRotY, rotY);\n      maxRotX = Math.max(maxRotX, rotX);\n      maxRotY = Math.max(maxRotY, rotY);\n    }\n\n    // calculate resolution\n    var resolution = this.getResolutionForExtent(\n      [minRotX, minRotY, maxRotX, maxRotY],\n      [size[0] - padding[1] - padding[3], size[1] - padding[0] - padding[2]]);\n    resolution = isNaN(resolution) ? minResolution :\n      Math.max(resolution, minResolution);\n    if (constrainResolution) {\n      var constrainedResolution = this.constrainResolution(resolution, 0, 0);\n      if (!nearest && constrainedResolution < resolution) {\n        constrainedResolution = this.constrainResolution(\n          constrainedResolution, -1, 0);\n      }\n      resolution = constrainedResolution;\n    }\n\n    // calculate center\n    sinAngle = -sinAngle; // go back to original rotation\n    var centerRotX = (minRotX + maxRotX) / 2;\n    var centerRotY = (minRotY + maxRotY) / 2;\n    centerRotX += (padding[1] - padding[3]) / 2 * resolution;\n    centerRotY += (padding[0] - padding[2]) / 2 * resolution;\n    var centerX = centerRotX * cosAngle - centerRotY * sinAngle;\n    var centerY = centerRotY * cosAngle + centerRotX * sinAngle;\n    var center = [centerX, centerY];\n    var callback = options.callback ? options.callback : VOID;\n\n    if (options.duration !== undefined) {\n      this.animate({\n        resolution: resolution,\n        center: center,\n        duration: options.duration,\n        easing: options.easing\n      }, callback);\n    } else {\n      this.setResolution(resolution);\n      this.setCenter(center);\n      animationCallback(callback, true);\n    }\n  };\n\n  /**\n   * Center on coordinate and view position.\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"./size.js\").Size} size Box pixel size.\n   * @param {import(\"./pixel.js\").Pixel} position Position on the view to center on.\n   * @api\n   */\n  View.prototype.centerOn = function centerOn (coordinate, size, position) {\n    // calculate rotated position\n    var rotation = this.getRotation();\n    var cosAngle = Math.cos(-rotation);\n    var sinAngle = Math.sin(-rotation);\n    var rotX = coordinate[0] * cosAngle - coordinate[1] * sinAngle;\n    var rotY = coordinate[1] * cosAngle + coordinate[0] * sinAngle;\n    var resolution = this.getResolution();\n    rotX += (size[0] / 2 - position[0]) * resolution;\n    rotY += (position[1] - size[1] / 2) * resolution;\n\n    // go back to original angle\n    sinAngle = -sinAngle; // go back to original rotation\n    var centerX = rotX * cosAngle - rotY * sinAngle;\n    var centerY = rotY * cosAngle + rotX * sinAngle;\n\n    this.setCenter([centerX, centerY]);\n  };\n\n  /**\n   * @return {boolean} Is defined.\n   */\n  View.prototype.isDef = function isDef () {\n    return !!this.getCenter() && this.getResolution() !== undefined;\n  };\n\n  /**\n   * Rotate the view around a given coordinate.\n   * @param {number} rotation New rotation value for the view.\n   * @param {import(\"./coordinate.js\").Coordinate=} opt_anchor The rotation center.\n   * @api\n   */\n  View.prototype.rotate = function rotate (rotation, opt_anchor) {\n    if (opt_anchor !== undefined) {\n      var center = this.calculateCenterRotate(rotation, opt_anchor);\n      this.setCenter(center);\n    }\n    this.setRotation(rotation);\n  };\n\n  /**\n   * Set the center of the current view.\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} center The center of the view.\n   * @observable\n   * @api\n   */\n  View.prototype.setCenter = function setCenter (center) {\n    this.set(ViewProperty.CENTER, center);\n    if (this.getAnimating()) {\n      this.cancelAnimations();\n    }\n  };\n\n  /**\n   * @param {ViewHint} hint Hint.\n   * @param {number} delta Delta.\n   * @return {number} New value.\n   */\n  View.prototype.setHint = function setHint (hint, delta) {\n    this.hints_[hint] += delta;\n    this.changed();\n    return this.hints_[hint];\n  };\n\n  /**\n   * Set the resolution for this view.\n   * @param {number|undefined} resolution The resolution of the view.\n   * @observable\n   * @api\n   */\n  View.prototype.setResolution = function setResolution (resolution) {\n    this.set(ViewProperty.RESOLUTION, resolution);\n    if (this.getAnimating()) {\n      this.cancelAnimations();\n    }\n  };\n\n  /**\n   * Set the rotation for this view.\n   * @param {number} rotation The rotation of the view in radians.\n   * @observable\n   * @api\n   */\n  View.prototype.setRotation = function setRotation (rotation) {\n    this.set(ViewProperty.ROTATION, rotation);\n    if (this.getAnimating()) {\n      this.cancelAnimations();\n    }\n  };\n\n  /**\n   * Zoom to a specific zoom level.\n   * @param {number} zoom Zoom level.\n   * @api\n   */\n  View.prototype.setZoom = function setZoom (zoom) {\n    this.setResolution(this.getResolutionForZoom(zoom));\n  };\n\n  return View;\n}(BaseObject));\n\n\n/**\n * @param {Function} callback Callback.\n * @param {*} returnValue Return value.\n */\nfunction animationCallback(callback, returnValue) {\n  setTimeout(function() {\n    callback(returnValue);\n  }, 0);\n}\n\n\n/**\n * @param {ViewOptions} options View options.\n * @return {import(\"./centerconstraint.js\").Type} The constraint.\n */\nexport function createCenterConstraint(options) {\n  if (options.extent !== undefined) {\n    return createExtent(options.extent);\n  } else {\n    return centerNone;\n  }\n}\n\n\n/**\n * @param {ViewOptions} options View options.\n * @return {{constraint: import(\"./resolutionconstraint.js\").Type, maxResolution: number,\n *     minResolution: number, minZoom: number, zoomFactor: number}} The constraint.\n */\nexport function createResolutionConstraint(options) {\n  var resolutionConstraint;\n  var maxResolution;\n  var minResolution;\n\n  // TODO: move these to be ol constants\n  // see https://github.com/openlayers/openlayers/issues/2076\n  var defaultMaxZoom = 28;\n  var defaultZoomFactor = 2;\n\n  var minZoom = options.minZoom !== undefined ?\n    options.minZoom : DEFAULT_MIN_ZOOM;\n\n  var maxZoom = options.maxZoom !== undefined ?\n    options.maxZoom : defaultMaxZoom;\n\n  var zoomFactor = options.zoomFactor !== undefined ?\n    options.zoomFactor : defaultZoomFactor;\n\n  if (options.resolutions !== undefined) {\n    var resolutions = options.resolutions;\n    maxResolution = resolutions[minZoom];\n    minResolution = resolutions[maxZoom] !== undefined ?\n      resolutions[maxZoom] : resolutions[resolutions.length - 1];\n    resolutionConstraint = createSnapToResolutions(\n      resolutions);\n  } else {\n    // calculate the default min and max resolution\n    var projection = createProjection(options.projection, 'EPSG:3857');\n    var extent = projection.getExtent();\n    var size = !extent ?\n      // use an extent that can fit the whole world if need be\n      360 * METERS_PER_UNIT[Units.DEGREES] /\n            projection.getMetersPerUnit() :\n      Math.max(getWidth(extent), getHeight(extent));\n\n    var defaultMaxResolution = size / DEFAULT_TILE_SIZE / Math.pow(\n      defaultZoomFactor, DEFAULT_MIN_ZOOM);\n\n    var defaultMinResolution = defaultMaxResolution / Math.pow(\n      defaultZoomFactor, defaultMaxZoom - DEFAULT_MIN_ZOOM);\n\n    // user provided maxResolution takes precedence\n    maxResolution = options.maxResolution;\n    if (maxResolution !== undefined) {\n      minZoom = 0;\n    } else {\n      maxResolution = defaultMaxResolution / Math.pow(zoomFactor, minZoom);\n    }\n\n    // user provided minResolution takes precedence\n    minResolution = options.minResolution;\n    if (minResolution === undefined) {\n      if (options.maxZoom !== undefined) {\n        if (options.maxResolution !== undefined) {\n          minResolution = maxResolution / Math.pow(zoomFactor, maxZoom);\n        } else {\n          minResolution = defaultMaxResolution / Math.pow(zoomFactor, maxZoom);\n        }\n      } else {\n        minResolution = defaultMinResolution;\n      }\n    }\n\n    // given discrete zoom levels, minResolution may be different than provided\n    maxZoom = minZoom + Math.floor(\n      Math.log(maxResolution / minResolution) / Math.log(zoomFactor));\n    minResolution = maxResolution / Math.pow(zoomFactor, maxZoom - minZoom);\n\n    resolutionConstraint = createSnapToPower(\n      zoomFactor, maxResolution, maxZoom - minZoom);\n  }\n  return {constraint: resolutionConstraint, maxResolution: maxResolution,\n    minResolution: minResolution, minZoom: minZoom, zoomFactor: zoomFactor};\n}\n\n\n/**\n * @param {ViewOptions} options View options.\n * @return {import(\"./rotationconstraint.js\").Type} Rotation constraint.\n */\nexport function createRotationConstraint(options) {\n  var enableRotation = options.enableRotation !== undefined ?\n    options.enableRotation : true;\n  if (enableRotation) {\n    var constrainRotation = options.constrainRotation;\n    if (constrainRotation === undefined || constrainRotation === true) {\n      return createSnapToZero();\n    } else if (constrainRotation === false) {\n      return rotationNone;\n    } else if (typeof constrainRotation === 'number') {\n      return createSnapToN(constrainRotation);\n    } else {\n      return rotationNone;\n    }\n  } else {\n    return disable;\n  }\n}\n\n\n/**\n * Determine if an animation involves no view change.\n * @param {Animation} animation The animation.\n * @return {boolean} The animation involves no view change.\n */\nexport function isNoopAnimation(animation) {\n  if (animation.sourceCenter && animation.targetCenter) {\n    if (!coordinatesEqual(animation.sourceCenter, animation.targetCenter)) {\n      return false;\n    }\n  }\n  if (animation.sourceResolution !== animation.targetResolution) {\n    return false;\n  }\n  if (animation.sourceRotation !== animation.targetRotation) {\n    return false;\n  }\n  return true;\n}\n\nexport default View;\n\n//# sourceMappingURL=View.js.map","/**\n * @module ol/TileState\n */\n\n/**\n * @enum {number}\n */\nexport default {\n  IDLE: 0,\n  LOADING: 1,\n  LOADED: 2,\n  /**\n   * Indicates that tile loading failed\n   * @type {number}\n   */\n  ERROR: 3,\n  EMPTY: 4,\n  ABORT: 5\n};\n\n//# sourceMappingURL=TileState.js.map","/**\n * @module ol/TileRange\n */\n\n/**\n * A representation of a contiguous block of tiles.  A tile range is specified\n * by its min/max tile coordinates and is inclusive of coordinates.\n */\nvar TileRange = function TileRange(minX, maxX, minY, maxY) {\n\n  /**\n   * @type {number}\n   */\n  this.minX = minX;\n\n  /**\n   * @type {number}\n   */\n  this.maxX = maxX;\n\n  /**\n   * @type {number}\n   */\n  this.minY = minY;\n\n  /**\n   * @type {number}\n   */\n  this.maxY = maxY;\n\n};\n\n/**\n * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n * @return {boolean} Contains tile coordinate.\n */\nTileRange.prototype.contains = function contains (tileCoord) {\n  return this.containsXY(tileCoord[1], tileCoord[2]);\n};\n\n/**\n * @param {TileRange} tileRange Tile range.\n * @return {boolean} Contains.\n */\nTileRange.prototype.containsTileRange = function containsTileRange (tileRange) {\n  return this.minX <= tileRange.minX && tileRange.maxX <= this.maxX &&\n     this.minY <= tileRange.minY && tileRange.maxY <= this.maxY;\n};\n\n/**\n * @param {number} x Tile coordinate x.\n * @param {number} y Tile coordinate y.\n * @return {boolean} Contains coordinate.\n */\nTileRange.prototype.containsXY = function containsXY (x, y) {\n  return this.minX <= x && x <= this.maxX && this.minY <= y && y <= this.maxY;\n};\n\n/**\n * @param {TileRange} tileRange Tile range.\n * @return {boolean} Equals.\n */\nTileRange.prototype.equals = function equals (tileRange) {\n  return this.minX == tileRange.minX && this.minY == tileRange.minY &&\n     this.maxX == tileRange.maxX && this.maxY == tileRange.maxY;\n};\n\n/**\n * @param {TileRange} tileRange Tile range.\n */\nTileRange.prototype.extend = function extend (tileRange) {\n  if (tileRange.minX < this.minX) {\n    this.minX = tileRange.minX;\n  }\n  if (tileRange.maxX > this.maxX) {\n    this.maxX = tileRange.maxX;\n  }\n  if (tileRange.minY < this.minY) {\n    this.minY = tileRange.minY;\n  }\n  if (tileRange.maxY > this.maxY) {\n    this.maxY = tileRange.maxY;\n  }\n};\n\n/**\n * @return {number} Height.\n */\nTileRange.prototype.getHeight = function getHeight () {\n  return this.maxY - this.minY + 1;\n};\n\n/**\n * @return {import(\"./size.js\").Size} Size.\n */\nTileRange.prototype.getSize = function getSize () {\n  return [this.getWidth(), this.getHeight()];\n};\n\n/**\n * @return {number} Width.\n */\nTileRange.prototype.getWidth = function getWidth () {\n  return this.maxX - this.minX + 1;\n};\n\n/**\n * @param {TileRange} tileRange Tile range.\n * @return {boolean} Intersects.\n */\nTileRange.prototype.intersects = function intersects (tileRange) {\n  return this.minX <= tileRange.maxX &&\n     this.maxX >= tileRange.minX &&\n     this.minY <= tileRange.maxY &&\n     this.maxY >= tileRange.minY;\n};\n\n\n/**\n * @param {number} minX Minimum X.\n * @param {number} maxX Maximum X.\n * @param {number} minY Minimum Y.\n * @param {number} maxY Maximum Y.\n * @param {TileRange=} tileRange TileRange.\n * @return {TileRange} Tile range.\n */\nexport function createOrUpdate(minX, maxX, minY, maxY, tileRange) {\n  if (tileRange !== undefined) {\n    tileRange.minX = minX;\n    tileRange.maxX = maxX;\n    tileRange.minY = minY;\n    tileRange.maxY = maxY;\n    return tileRange;\n  } else {\n    return new TileRange(minX, maxX, minY, maxY);\n  }\n}\n\n\nexport default TileRange;\n\n//# sourceMappingURL=TileRange.js.map"],"sourceRoot":""}