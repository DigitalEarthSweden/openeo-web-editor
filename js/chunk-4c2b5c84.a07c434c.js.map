{"version":3,"sources":["webpack:///./node_modules/ol/MapBrowserEventType.js","webpack:///./node_modules/ol/Observable.js","webpack:///./node_modules/ol/MapBrowserEvent.js","webpack:///./node_modules/ol/MapEventType.js","webpack:///./node_modules/ol/LayerType.js","webpack:///./node_modules/ol/MapBrowserEventHandler.js","webpack:///./node_modules/ol/MapProperty.js","webpack:///./node_modules/ol/PluggableMap.js","webpack:///./node_modules/ol/Map.js","webpack:///./node_modules/ol/MapEvent.js","webpack:///./node_modules/ol/ObjectEventType.js","webpack:///./node_modules/ol/MapBrowserPointerEvent.js","webpack:///./node_modules/ol/Object.js"],"names":["SINGLECLICK","CLICK","DBLCLICK","POINTERDRAG","POINTERMOVE","POINTERDOWN","POINTERUP","POINTEROVER","POINTEROUT","POINTERENTER","POINTERLEAVE","POINTERCANCEL","Observable","EventTarget","call","this","revision_","__proto__","prototype","Object","create","constructor","changed","dispatchEvent","CHANGE","getRevision","on","type","listener","Array","isArray","len","length","keys","i","once","un","ii","unByKey","key","MapBrowserEvent","MapEvent","map","browserEvent","opt_dragging","opt_frameState","originalEvent","pixel","getEventPixel","coordinate","getCoordinateFromPixel","dragging","undefined","preventDefault","stopPropagation","POSTRENDER","MOVESTART","MOVEEND","IMAGE","TILE","VECTOR_TILE","VECTOR","MapBrowserEventHandler","moveTolerance","map_","clickTimeoutId_","dragging_","dragListenerKeys_","moveTolerance_","down_","element","getViewport","activePointers_","trackedTouches_","pointerEventHandler_","PointerEventHandler","documentPointerEventHandler_","pointerdownListenerKey_","handlePointerDown_","relayedListenerKey_","relayEvent_","emulateClick_","pointerEvent","newEvent","MapBrowserPointerEvent","MapBrowserEventType","clearTimeout","setTimeout","bind","updateActivePointers_","event","pointerId","handlePointerUp_","propagationStopped","isMouseActionButton_","forEach","dispose","button","document","push","handlePointerMove_","isMoving_","Math","abs","clientX","clientY","disposeInternal","LAYERGROUP","SIZE","TARGET","VIEW","BaseObject","PluggableMap","options","optionsInternal","createOptionsInternal","maxTilesLoading_","maxTilesLoading","loadTilesWhileAnimating_","loadTilesWhileAnimating","loadTilesWhileInteracting_","loadTilesWhileInteracting","pixelRatio_","pixelRatio","animationDelayKey_","animationDelay_","renderFrame_","Date","now","coordinateToPixelTransform_","pixelToCoordinateTransform_","frameIndex_","frameState_","previousExtent_","viewPropertyListenerKey_","viewChangeListenerKey_","layerGroupPropertyListenerKeys_","viewport_","createElement","className","style","position","overflow","width","height","msTouchAction","touchAction","overlayContainer_","appendChild","overlayContainerStopEvent_","overlayEvents","MOUSEDOWN","TOUCHSTART","MSPOINTERDOWN","MOUSEWHEEL","WHEEL","mapBrowserEventHandler_","handleMapBrowserEvent","keyboardEventTarget_","keyboardEventTarget","keyHandlerKeys_","CONTEXTMENU","handleBrowserEvent","controls","Collection","interactions","overlays_","overlays","overlayIdIndex_","renderer_","createRenderer","handleResize_","focus_","postRenderFunctions_","tileQueue_","TileQueue","getTilePriority","handleTileChange_","skippedFeatureUids_","MapProperty","handleLayerGroupChanged_","handleViewChanged_","handleSizeChanged_","handleTargetChanged_","setProperties","values","control","setMap","CollectionEventType","ADD","REMOVE","interaction","addOverlayInternal_","overlay","id","getId","toString","Error","addControl","getControls","addInteraction","getInteractions","addLayer","layer","layers","getLayerGroup","getLayers","addOverlay","getOverlays","removeEventListener","RESIZE","cancelAnimationFrame","setTarget","forEachFeatureAtPixel","callback","opt_options","hitTolerance","layerFilter","forEachFeatureAtCoordinate","getFeaturesAtPixel","features","feature","forEachLayerAtPixel","hasFeatureAtPixel","hasFeatureAtCoordinate","getEventCoordinate","viewportPosition","getBoundingClientRect","eventPosition","changedTouches","left","top","getTarget","get","getTargetElement","target","getElementById","frameState","pixelToCoordinateTransform","slice","getOverlayById","getPixelFromCoordinate","coordinateToPixelTransform","getRenderer","getSize","getView","getOverlayContainer","getOverlayContainerStopEvent","tile","tileSourceKey","tileCenter","tileResolution","wantedTiles","getKey","deltaX","focus","deltaY","log","sqrt","opt_type","mapBrowserEvent","interactionsArray","getArray","getActive","cont","handleEvent","handlePostRender","tileQueue","isEmpty","maxTotalLoading","maxNewLoads","hints","viewHints","ViewHint","ANIMATING","INTERACTING","getTilesLoading","reprioritize","loadMoreTiles","hasListener","RENDERCOMPLETE","animate","getLoading","dispatchRenderEvent","postRenderFunctions","render","targetElement","KEYDOWN","KEYPRESS","updateSize","window","addEventListener","removeLayerRenderers","handleViewPropertyChanged_","view","setAttribute","ObjectEventType","PROPERTYCHANGE","layerGroup","isRendered","renderSync","requestAnimationFrame","removeControl","remove","removeInteraction","removeLayer","removeOverlay","time","viewState","size","extent","previousFrameState","isDef","getHints","layerStatesArray","getLayerStatesArray","layerStates","getState","center","index","skippedFeatureUids","usedTiles","resolution","rotation","renderFrame","apply","moveStart","MapEventType","idle","setLayerGroup","set","setSize","setView","skipFeature","computedStyle","getComputedStyle","offsetWidth","parseFloat","offsetHeight","unskipFeature","View","source","getSource","loading","Map","renderer","registerLayerRenderers","Event","ObjectEvent","oldValue","opt_values","values_","value","hasOwnProperty","getKeys","getProperties","notify","eventType","getChangeEventType","opt_silent","unset","changeEventTypeCache"],"mappings":"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","file":"js/chunk-4c2b5c84.a07c434c.js","sourcesContent":["/**\n * @module ol/MapBrowserEventType\n */\nimport EventType from './events/EventType.js';\n\n/**\n * Constants for event names.\n * @enum {string}\n */\nexport default {\n\n  /**\n   * A true single click with no dragging and no double click. Note that this\n   * event is delayed by 250 ms to ensure that it is not a double click.\n   * @event module:ol/MapBrowserEvent~MapBrowserEvent#singleclick\n   * @api\n   */\n  SINGLECLICK: 'singleclick',\n\n  /**\n   * A click with no dragging. A double click will fire two of this.\n   * @event module:ol/MapBrowserEvent~MapBrowserEvent#click\n   * @api\n   */\n  CLICK: EventType.CLICK,\n\n  /**\n   * A true double click, with no dragging.\n   * @event module:ol/MapBrowserEvent~MapBrowserEvent#dblclick\n   * @api\n   */\n  DBLCLICK: EventType.DBLCLICK,\n\n  /**\n   * Triggered when a pointer is dragged.\n   * @event module:ol/MapBrowserEvent~MapBrowserEvent#pointerdrag\n   * @api\n   */\n  POINTERDRAG: 'pointerdrag',\n\n  /**\n   * Triggered when a pointer is moved. Note that on touch devices this is\n   * triggered when the map is panned, so is not the same as mousemove.\n   * @event module:ol/MapBrowserEvent~MapBrowserEvent#pointermove\n   * @api\n   */\n  POINTERMOVE: 'pointermove',\n\n  POINTERDOWN: 'pointerdown',\n  POINTERUP: 'pointerup',\n  POINTEROVER: 'pointerover',\n  POINTEROUT: 'pointerout',\n  POINTERENTER: 'pointerenter',\n  POINTERLEAVE: 'pointerleave',\n  POINTERCANCEL: 'pointercancel'\n};\n\n//# sourceMappingURL=MapBrowserEventType.js.map","/**\n * @module ol/Observable\n */\nimport {listen, unlistenByKey, unlisten, listenOnce} from './events.js';\nimport EventTarget from './events/Target.js';\nimport EventType from './events/EventType.js';\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * An event target providing convenient methods for listener registration\n * and unregistration. A generic `change` event is always available through\n * {@link module:ol/Observable~Observable#changed}.\n *\n * @fires import(\"./events/Event.js\").Event\n * @api\n */\nvar Observable = /*@__PURE__*/(function (EventTarget) {\n  function Observable() {\n\n    EventTarget.call(this);\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.revision_ = 0;\n\n  }\n\n  if ( EventTarget ) Observable.__proto__ = EventTarget;\n  Observable.prototype = Object.create( EventTarget && EventTarget.prototype );\n  Observable.prototype.constructor = Observable;\n\n  /**\n   * Increases the revision counter and dispatches a 'change' event.\n   * @api\n   */\n  Observable.prototype.changed = function changed () {\n    ++this.revision_;\n    this.dispatchEvent(EventType.CHANGE);\n  };\n\n  /**\n   * Get the version number for this object.  Each time the object is modified,\n   * its version number will be incremented.\n   * @return {number} Revision.\n   * @api\n   */\n  Observable.prototype.getRevision = function getRevision () {\n    return this.revision_;\n  };\n\n  /**\n   * Listen for a certain type of event.\n   * @param {string|Array<string>} type The event type or array of event types.\n   * @param {function(?): ?} listener The listener function.\n   * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Unique key for the listener. If\n   *     called with an array of event types as the first argument, the return\n   *     will be an array of keys.\n   * @api\n   */\n  Observable.prototype.on = function on (type, listener) {\n    if (Array.isArray(type)) {\n      var len = type.length;\n      var keys = new Array(len);\n      for (var i = 0; i < len; ++i) {\n        keys[i] = listen(this, type[i], listener);\n      }\n      return keys;\n    } else {\n      return listen(this, /** @type {string} */ (type), listener);\n    }\n  };\n\n  /**\n   * Listen once for a certain type of event.\n   * @param {string|Array<string>} type The event type or array of event types.\n   * @param {function(?): ?} listener The listener function.\n   * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Unique key for the listener. If\n   *     called with an array of event types as the first argument, the return\n   *     will be an array of keys.\n   * @api\n   */\n  Observable.prototype.once = function once (type, listener) {\n    if (Array.isArray(type)) {\n      var len = type.length;\n      var keys = new Array(len);\n      for (var i = 0; i < len; ++i) {\n        keys[i] = listenOnce(this, type[i], listener);\n      }\n      return keys;\n    } else {\n      return listenOnce(this, /** @type {string} */ (type), listener);\n    }\n  };\n\n  /**\n   * Unlisten for a certain type of event.\n   * @param {string|Array<string>} type The event type or array of event types.\n   * @param {function(?): ?} listener The listener function.\n   * @api\n   */\n  Observable.prototype.un = function un (type, listener) {\n    if (Array.isArray(type)) {\n      for (var i = 0, ii = type.length; i < ii; ++i) {\n        unlisten(this, type[i], listener);\n      }\n      return;\n    } else {\n      unlisten(this, /** @type {string} */ (type), listener);\n    }\n  };\n\n  return Observable;\n}(EventTarget));\n\n\n/**\n * Removes an event listener using the key returned by `on()` or `once()`.\n * @param {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} key The key returned by `on()`\n *     or `once()` (or an array of keys).\n * @api\n */\nexport function unByKey(key) {\n  if (Array.isArray(key)) {\n    for (var i = 0, ii = key.length; i < ii; ++i) {\n      unlistenByKey(key[i]);\n    }\n  } else {\n    unlistenByKey(/** @type {import(\"./events.js\").EventsKey} */ (key));\n  }\n}\n\n\nexport default Observable;\n\n//# sourceMappingURL=Observable.js.map","/**\n * @module ol/MapBrowserEvent\n */\nimport MapEvent from './MapEvent.js';\n\n/**\n * @classdesc\n * Events emitted as map browser events are instances of this type.\n * See {@link module:ol/PluggableMap~PluggableMap} for which events trigger a map browser event.\n */\nvar MapBrowserEvent = /*@__PURE__*/(function (MapEvent) {\n  function MapBrowserEvent(type, map, browserEvent, opt_dragging, opt_frameState) {\n\n    MapEvent.call(this, type, map, opt_frameState);\n\n    /**\n     * The original browser event.\n     * @const\n     * @type {Event}\n     * @api\n     */\n    this.originalEvent = browserEvent;\n\n    /**\n     * The map pixel relative to the viewport corresponding to the original browser event.\n     * @type {import(\"./pixel.js\").Pixel}\n     * @api\n     */\n    this.pixel = map.getEventPixel(browserEvent);\n\n    /**\n     * The coordinate in view projection corresponding to the original browser event.\n     * @type {import(\"./coordinate.js\").Coordinate}\n     * @api\n     */\n    this.coordinate = map.getCoordinateFromPixel(this.pixel);\n\n    /**\n     * Indicates if the map is currently being dragged. Only set for\n     * `POINTERDRAG` and `POINTERMOVE` events. Default is `false`.\n     *\n     * @type {boolean}\n     * @api\n     */\n    this.dragging = opt_dragging !== undefined ? opt_dragging : false;\n\n  }\n\n  if ( MapEvent ) MapBrowserEvent.__proto__ = MapEvent;\n  MapBrowserEvent.prototype = Object.create( MapEvent && MapEvent.prototype );\n  MapBrowserEvent.prototype.constructor = MapBrowserEvent;\n\n  /**\n   * Prevents the default browser action.\n   * See https://developer.mozilla.org/en-US/docs/Web/API/event.preventDefault.\n   * @override\n   * @api\n   */\n  MapBrowserEvent.prototype.preventDefault = function preventDefault () {\n    MapEvent.prototype.preventDefault.call(this);\n    this.originalEvent.preventDefault();\n  };\n\n  /**\n   * Prevents further propagation of the current event.\n   * See https://developer.mozilla.org/en-US/docs/Web/API/event.stopPropagation.\n   * @override\n   * @api\n   */\n  MapBrowserEvent.prototype.stopPropagation = function stopPropagation () {\n    MapEvent.prototype.stopPropagation.call(this);\n    this.originalEvent.stopPropagation();\n  };\n\n  return MapBrowserEvent;\n}(MapEvent));\n\n\nexport default MapBrowserEvent;\n\n//# sourceMappingURL=MapBrowserEvent.js.map","/**\n * @module ol/MapEventType\n */\n\n/**\n * @enum {string}\n */\nexport default {\n\n  /**\n   * Triggered after a map frame is rendered.\n   * @event module:ol/MapEvent~MapEvent#postrender\n   * @api\n   */\n  POSTRENDER: 'postrender',\n\n  /**\n   * Triggered when the map starts moving.\n   * @event module:ol/MapEvent~MapEvent#movestart\n   * @api\n   */\n  MOVESTART: 'movestart',\n\n  /**\n   * Triggered after the map is moved.\n   * @event module:ol/MapEvent~MapEvent#moveend\n   * @api\n   */\n  MOVEEND: 'moveend'\n\n};\n\n//# sourceMappingURL=MapEventType.js.map","/**\n * @module ol/LayerType\n */\n\n/**\n * A layer type used when creating layer renderers.\n * @enum {string}\n */\nexport default {\n  IMAGE: 'IMAGE',\n  TILE: 'TILE',\n  VECTOR_TILE: 'VECTOR_TILE',\n  VECTOR: 'VECTOR'\n};\n\n//# sourceMappingURL=LayerType.js.map","/**\n * @module ol/MapBrowserEventHandler\n */\nimport {DEVICE_PIXEL_RATIO} from './has.js';\nimport MapBrowserEventType from './MapBrowserEventType.js';\nimport MapBrowserPointerEvent from './MapBrowserPointerEvent.js';\nimport {listen, unlistenByKey} from './events.js';\nimport EventTarget from './events/Target.js';\nimport PointerEventType from './pointer/EventType.js';\nimport PointerEventHandler from './pointer/PointerEventHandler.js';\n\nvar MapBrowserEventHandler = /*@__PURE__*/(function (EventTarget) {\n  function MapBrowserEventHandler(map, moveTolerance) {\n\n    EventTarget.call(this);\n\n    /**\n     * This is the element that we will listen to the real events on.\n     * @type {import(\"./PluggableMap.js\").default}\n     * @private\n     */\n    this.map_ = map;\n\n    /**\n     * @type {any}\n     * @private\n     */\n    this.clickTimeoutId_;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.dragging_ = false;\n\n    /**\n     * @type {!Array<import(\"./events.js\").EventsKey>}\n     * @private\n     */\n    this.dragListenerKeys_ = [];\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.moveTolerance_ = moveTolerance ?\n      moveTolerance * DEVICE_PIXEL_RATIO : DEVICE_PIXEL_RATIO;\n\n    /**\n     * The most recent \"down\" type event (or null if none have occurred).\n     * Set on pointerdown.\n     * @type {import(\"./pointer/PointerEvent.js\").default}\n     * @private\n     */\n    this.down_ = null;\n\n    var element = this.map_.getViewport();\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.activePointers_ = 0;\n\n    /**\n     * @type {!Object<number, boolean>}\n     * @private\n     */\n    this.trackedTouches_ = {};\n\n    /**\n     * Event handler which generates pointer events for\n     * the viewport element.\n     *\n     * @type {PointerEventHandler}\n     * @private\n     */\n    this.pointerEventHandler_ = new PointerEventHandler(element);\n\n    /**\n     * Event handler which generates pointer events for\n     * the document (used when dragging).\n     *\n     * @type {PointerEventHandler}\n     * @private\n     */\n    this.documentPointerEventHandler_ = null;\n\n    /**\n     * @type {?import(\"./events.js\").EventsKey}\n     * @private\n     */\n    this.pointerdownListenerKey_ = listen(this.pointerEventHandler_,\n      PointerEventType.POINTERDOWN,\n      this.handlePointerDown_, this);\n\n    /**\n     * @type {?import(\"./events.js\").EventsKey}\n     * @private\n     */\n    this.relayedListenerKey_ = listen(this.pointerEventHandler_,\n      PointerEventType.POINTERMOVE,\n      this.relayEvent_, this);\n\n  }\n\n  if ( EventTarget ) MapBrowserEventHandler.__proto__ = EventTarget;\n  MapBrowserEventHandler.prototype = Object.create( EventTarget && EventTarget.prototype );\n  MapBrowserEventHandler.prototype.constructor = MapBrowserEventHandler;\n\n  /**\n   * @param {import(\"./pointer/PointerEvent.js\").default} pointerEvent Pointer\n   * event.\n   * @private\n   */\n  MapBrowserEventHandler.prototype.emulateClick_ = function emulateClick_ (pointerEvent) {\n    var newEvent = new MapBrowserPointerEvent(\n      MapBrowserEventType.CLICK, this.map_, pointerEvent);\n    this.dispatchEvent(newEvent);\n    if (this.clickTimeoutId_ !== undefined) {\n      // double-click\n      clearTimeout(this.clickTimeoutId_);\n      this.clickTimeoutId_ = undefined;\n      newEvent = new MapBrowserPointerEvent(\n        MapBrowserEventType.DBLCLICK, this.map_, pointerEvent);\n      this.dispatchEvent(newEvent);\n    } else {\n      // click\n      this.clickTimeoutId_ = setTimeout(function() {\n        this.clickTimeoutId_ = undefined;\n        var newEvent = new MapBrowserPointerEvent(\n          MapBrowserEventType.SINGLECLICK, this.map_, pointerEvent);\n        this.dispatchEvent(newEvent);\n      }.bind(this), 250);\n    }\n  };\n\n  /**\n   * Keeps track on how many pointers are currently active.\n   *\n   * @param {import(\"./pointer/PointerEvent.js\").default} pointerEvent Pointer\n   * event.\n   * @private\n   */\n  MapBrowserEventHandler.prototype.updateActivePointers_ = function updateActivePointers_ (pointerEvent) {\n    var event = pointerEvent;\n\n    if (event.type == MapBrowserEventType.POINTERUP ||\n        event.type == MapBrowserEventType.POINTERCANCEL) {\n      delete this.trackedTouches_[event.pointerId];\n    } else if (event.type == MapBrowserEventType.POINTERDOWN) {\n      this.trackedTouches_[event.pointerId] = true;\n    }\n    this.activePointers_ = Object.keys(this.trackedTouches_).length;\n  };\n\n  /**\n   * @param {import(\"./pointer/PointerEvent.js\").default} pointerEvent Pointer\n   * event.\n   * @private\n   */\n  MapBrowserEventHandler.prototype.handlePointerUp_ = function handlePointerUp_ (pointerEvent) {\n    this.updateActivePointers_(pointerEvent);\n    var newEvent = new MapBrowserPointerEvent(\n      MapBrowserEventType.POINTERUP, this.map_, pointerEvent);\n    this.dispatchEvent(newEvent);\n\n    // We emulate click events on left mouse button click, touch contact, and pen\n    // contact. isMouseActionButton returns true in these cases (evt.button is set\n    // to 0).\n    // See http://www.w3.org/TR/pointerevents/#button-states\n    // We only fire click, singleclick, and doubleclick if nobody has called\n    // event.stopPropagation() or event.preventDefault().\n    if (!newEvent.propagationStopped && !this.dragging_ && this.isMouseActionButton_(pointerEvent)) {\n      this.emulateClick_(this.down_);\n    }\n\n    if (this.activePointers_ === 0) {\n      this.dragListenerKeys_.forEach(unlistenByKey);\n      this.dragListenerKeys_.length = 0;\n      this.dragging_ = false;\n      this.down_ = null;\n      this.documentPointerEventHandler_.dispose();\n      this.documentPointerEventHandler_ = null;\n    }\n  };\n\n  /**\n   * @param {import(\"./pointer/PointerEvent.js\").default} pointerEvent Pointer\n   * event.\n   * @return {boolean} If the left mouse button was pressed.\n   * @private\n   */\n  MapBrowserEventHandler.prototype.isMouseActionButton_ = function isMouseActionButton_ (pointerEvent) {\n    return pointerEvent.button === 0;\n  };\n\n  /**\n   * @param {import(\"./pointer/PointerEvent.js\").default} pointerEvent Pointer\n   * event.\n   * @private\n   */\n  MapBrowserEventHandler.prototype.handlePointerDown_ = function handlePointerDown_ (pointerEvent) {\n    this.updateActivePointers_(pointerEvent);\n    var newEvent = new MapBrowserPointerEvent(\n      MapBrowserEventType.POINTERDOWN, this.map_, pointerEvent);\n    this.dispatchEvent(newEvent);\n\n    this.down_ = pointerEvent;\n\n    if (this.dragListenerKeys_.length === 0) {\n      /* Set up a pointer event handler on the `document`,\n       * which is required when the pointer is moved outside\n       * the viewport when dragging.\n       */\n      this.documentPointerEventHandler_ =\n          new PointerEventHandler(document);\n\n      this.dragListenerKeys_.push(\n        listen(this.documentPointerEventHandler_,\n          MapBrowserEventType.POINTERMOVE,\n          this.handlePointerMove_, this),\n        listen(this.documentPointerEventHandler_,\n          MapBrowserEventType.POINTERUP,\n          this.handlePointerUp_, this),\n        /* Note that the listener for `pointercancel is set up on\n         * `pointerEventHandler_` and not `documentPointerEventHandler_` like\n         * the `pointerup` and `pointermove` listeners.\n         *\n         * The reason for this is the following: `TouchSource.vacuumTouches_()`\n         * issues `pointercancel` events, when there was no `touchend` for a\n         * `touchstart`. Now, let's say a first `touchstart` is registered on\n         * `pointerEventHandler_`. The `documentPointerEventHandler_` is set up.\n         * But `documentPointerEventHandler_` doesn't know about the first\n         * `touchstart`. If there is no `touchend` for the `touchstart`, we can\n         * only receive a `touchcancel` from `pointerEventHandler_`, because it is\n         * only registered there.\n         */\n        listen(this.pointerEventHandler_,\n          MapBrowserEventType.POINTERCANCEL,\n          this.handlePointerUp_, this)\n      );\n    }\n  };\n\n  /**\n   * @param {import(\"./pointer/PointerEvent.js\").default} pointerEvent Pointer\n   * event.\n   * @private\n   */\n  MapBrowserEventHandler.prototype.handlePointerMove_ = function handlePointerMove_ (pointerEvent) {\n    // Between pointerdown and pointerup, pointermove events are triggered.\n    // To avoid a 'false' touchmove event to be dispatched, we test if the pointer\n    // moved a significant distance.\n    if (this.isMoving_(pointerEvent)) {\n      this.dragging_ = true;\n      var newEvent = new MapBrowserPointerEvent(\n        MapBrowserEventType.POINTERDRAG, this.map_, pointerEvent,\n        this.dragging_);\n      this.dispatchEvent(newEvent);\n    }\n\n    // Some native android browser triggers mousemove events during small period\n    // of time. See: https://code.google.com/p/android/issues/detail?id=5491 or\n    // https://code.google.com/p/android/issues/detail?id=19827\n    // ex: Galaxy Tab P3110 + Android 4.1.1\n    pointerEvent.preventDefault();\n  };\n\n  /**\n   * Wrap and relay a pointer event.  Note that this requires that the type\n   * string for the MapBrowserPointerEvent matches the PointerEvent type.\n   * @param {import(\"./pointer/PointerEvent.js\").default} pointerEvent Pointer\n   * event.\n   * @private\n   */\n  MapBrowserEventHandler.prototype.relayEvent_ = function relayEvent_ (pointerEvent) {\n    var dragging = !!(this.down_ && this.isMoving_(pointerEvent));\n    this.dispatchEvent(new MapBrowserPointerEvent(\n      pointerEvent.type, this.map_, pointerEvent, dragging));\n  };\n\n  /**\n   * @param {import(\"./pointer/PointerEvent.js\").default} pointerEvent Pointer\n   * event.\n   * @return {boolean} Is moving.\n   * @private\n   */\n  MapBrowserEventHandler.prototype.isMoving_ = function isMoving_ (pointerEvent) {\n    return this.dragging_ ||\n        Math.abs(pointerEvent.clientX - this.down_.clientX) > this.moveTolerance_ ||\n        Math.abs(pointerEvent.clientY - this.down_.clientY) > this.moveTolerance_;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  MapBrowserEventHandler.prototype.disposeInternal = function disposeInternal () {\n    if (this.relayedListenerKey_) {\n      unlistenByKey(this.relayedListenerKey_);\n      this.relayedListenerKey_ = null;\n    }\n    if (this.pointerdownListenerKey_) {\n      unlistenByKey(this.pointerdownListenerKey_);\n      this.pointerdownListenerKey_ = null;\n    }\n\n    this.dragListenerKeys_.forEach(unlistenByKey);\n    this.dragListenerKeys_.length = 0;\n\n    if (this.documentPointerEventHandler_) {\n      this.documentPointerEventHandler_.dispose();\n      this.documentPointerEventHandler_ = null;\n    }\n    if (this.pointerEventHandler_) {\n      this.pointerEventHandler_.dispose();\n      this.pointerEventHandler_ = null;\n    }\n    EventTarget.prototype.disposeInternal.call(this);\n  };\n\n  return MapBrowserEventHandler;\n}(EventTarget));\n\n\nexport default MapBrowserEventHandler;\n\n//# sourceMappingURL=MapBrowserEventHandler.js.map","/**\n * @module ol/MapProperty\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  LAYERGROUP: 'layergroup',\n  SIZE: 'size',\n  TARGET: 'target',\n  VIEW: 'view'\n};\n\n//# sourceMappingURL=MapProperty.js.map","/**\n * @module ol/PluggableMap\n */\nimport {getUid} from './util.js';\nimport Collection from './Collection.js';\nimport CollectionEventType from './CollectionEventType.js';\nimport MapBrowserEvent from './MapBrowserEvent.js';\nimport MapBrowserEventHandler from './MapBrowserEventHandler.js';\nimport MapBrowserEventType from './MapBrowserEventType.js';\nimport MapEvent from './MapEvent.js';\nimport MapEventType from './MapEventType.js';\nimport MapProperty from './MapProperty.js';\nimport RenderEventType from './render/EventType.js';\nimport BaseObject, {getChangeEventType} from './Object.js';\nimport ObjectEventType from './ObjectEventType.js';\nimport TileQueue from './TileQueue.js';\nimport View from './View.js';\nimport ViewHint from './ViewHint.js';\nimport {assert} from './asserts.js';\nimport {removeNode} from './dom.js';\nimport {listen, unlistenByKey, unlisten} from './events.js';\nimport {stopPropagation} from './events/Event.js';\nimport EventType from './events/EventType.js';\nimport {createEmpty, clone, createOrUpdateEmpty, equals, getForViewAndSize, isEmpty} from './extent.js';\nimport {TRUE} from './functions.js';\nimport {DEVICE_PIXEL_RATIO, TOUCH} from './has.js';\nimport LayerGroup from './layer/Group.js';\nimport {hasArea} from './size.js';\nimport {DROP} from './structs/PriorityQueue.js';\nimport {create as createTransform, apply as applyTransform} from './transform.js';\n\n\n/**\n * State of the current frame. Only `pixelRatio`, `time` and `viewState` should\n * be used in applications.\n * @typedef {Object} FrameState\n * @property {number} pixelRatio The pixel ratio of the frame.\n * @property {number} time The time when rendering of the frame was requested.\n * @property {import(\"./View.js\").State} viewState The state of the current view.\n * @property {boolean} animate\n * @property {import(\"./transform.js\").Transform} coordinateToPixelTransform\n * @property {null|import(\"./extent.js\").Extent} extent\n * @property {import(\"./coordinate.js\").Coordinate} focus\n * @property {number} index\n * @property {Object<string, import(\"./layer/Layer.js\").State>} layerStates\n * @property {Array<import(\"./layer/Layer.js\").State>} layerStatesArray\n * @property {import(\"./transform.js\").Transform} pixelToCoordinateTransform\n * @property {Array<PostRenderFunction>} postRenderFunctions\n * @property {import(\"./size.js\").Size} size\n * @property {!Object<string, boolean>} skippedFeatureUids\n * @property {TileQueue} tileQueue\n * @property {Object<string, Object<string, import(\"./TileRange.js\").default>>} usedTiles\n * @property {Array<number>} viewHints\n * @property {!Object<string, Object<string, boolean>>} wantedTiles\n */\n\n\n/**\n * @typedef {function(PluggableMap, ?FrameState): boolean} PostRenderFunction\n */\n\n\n/**\n * @typedef {Object} AtPixelOptions\n * @property {undefined|function(import(\"./layer/Layer.js\").default): boolean} layerFilter Layer filter\n * function. The filter function will receive one argument, the\n * {@link module:ol/layer/Layer layer-candidate} and it should return a boolean value.\n * Only layers which are visible and for which this function returns `true`\n * will be tested for features. By default, all visible layers will be tested.\n * @property {number} [hitTolerance=0] Hit-detection tolerance in pixels. Pixels\n * inside the radius around the given position will be checked for features. This only\n * works for the canvas renderer and not for WebGL.\n */\n\n\n/**\n * @typedef {Object} MapOptionsInternal\n * @property {Collection<import(\"./control/Control.js\").default>} [controls]\n * @property {Collection<import(\"./interaction/Interaction.js\").default>} [interactions]\n * @property {HTMLElement|Document} keyboardEventTarget\n * @property {Collection<import(\"./Overlay.js\").default>} overlays\n * @property {Object<string, *>} values\n */\n\n\n/**\n * Object literal with config options for the map.\n * @typedef {Object} MapOptions\n * @property {Collection<import(\"./control/Control.js\").default>|Array<import(\"./control/Control.js\").default>} [controls]\n * Controls initially added to the map. If not specified,\n * {@link module:ol/control~defaults} is used.\n * @property {number} [pixelRatio=window.devicePixelRatio] The ratio between\n * physical pixels and device-independent pixels (dips) on the device.\n * @property {Collection<import(\"./interaction/Interaction.js\").default>|Array<import(\"./interaction/Interaction.js\").default>} [interactions]\n * Interactions that are initially added to the map. If not specified,\n * {@link module:ol/interaction~defaults} is used.\n * @property {HTMLElement|Document|string} [keyboardEventTarget] The element to\n * listen to keyboard events on. This determines when the `KeyboardPan` and\n * `KeyboardZoom` interactions trigger. For example, if this option is set to\n * `document` the keyboard interactions will always trigger. If this option is\n * not specified, the element the library listens to keyboard events on is the\n * map target (i.e. the user-provided div for the map). If this is not\n * `document`, the target element needs to be focused for key events to be\n * emitted, requiring that the target element has a `tabindex` attribute.\n * @property {Array<import(\"./layer/Base.js\").default>|Collection<import(\"./layer/Base.js\").default>|LayerGroup} [layers]\n * Layers. If this is not defined, a map with no layers will be rendered. Note\n * that layers are rendered in the order supplied, so if you want, for example,\n * a vector layer to appear on top of a tile layer, it must come after the tile\n * layer.\n * @property {number} [maxTilesLoading=16] Maximum number tiles to load\n * simultaneously.\n * @property {boolean} [loadTilesWhileAnimating=false] When set to `true`, tiles\n * will be loaded during animations. This may improve the user experience, but\n * can also make animations stutter on devices with slow memory.\n * @property {boolean} [loadTilesWhileInteracting=false] When set to `true`,\n * tiles will be loaded while interacting with the map. This may improve the\n * user experience, but can also make map panning and zooming choppy on devices\n * with slow memory.\n * @property {number} [moveTolerance=1] The minimum distance in pixels the\n * cursor must move to be detected as a map move event instead of a click.\n * Increasing this value can make it easier to click on the map.\n * @property {Collection<import(\"./Overlay.js\").default>|Array<import(\"./Overlay.js\").default>} [overlays]\n * Overlays initially added to the map. By default, no overlays are added.\n * @property {HTMLElement|string} [target] The container for the map, either the\n * element itself or the `id` of the element. If not specified at construction\n * time, {@link module:ol/Map~Map#setTarget} must be called for the map to be\n * rendered.\n * @property {View} [view] The map's view.  No layer sources will be\n * fetched unless this is specified at construction time or through\n * {@link module:ol/Map~Map#setView}.\n */\n\n\n/**\n * @fires import(\"./MapBrowserEvent.js\").MapBrowserEvent\n * @fires import(\"./MapEvent.js\").MapEvent\n * @fires module:ol/render/Event~RenderEvent#postcompose\n * @fires module:ol/render/Event~RenderEvent#precompose\n * @fires module:ol/render/Event~RenderEvent#rendercomplete\n * @api\n */\nvar PluggableMap = /*@__PURE__*/(function (BaseObject) {\n  function PluggableMap(options) {\n\n    BaseObject.call(this);\n\n    var optionsInternal = createOptionsInternal(options);\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.maxTilesLoading_ = options.maxTilesLoading !== undefined ? options.maxTilesLoading : 16;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.loadTilesWhileAnimating_ =\n        options.loadTilesWhileAnimating !== undefined ?\n          options.loadTilesWhileAnimating : false;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.loadTilesWhileInteracting_ =\n        options.loadTilesWhileInteracting !== undefined ?\n          options.loadTilesWhileInteracting : false;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.pixelRatio_ = options.pixelRatio !== undefined ?\n      options.pixelRatio : DEVICE_PIXEL_RATIO;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.animationDelayKey_;\n\n    /**\n     * @private\n     */\n    this.animationDelay_ = function() {\n      this.animationDelayKey_ = undefined;\n      this.renderFrame_.call(this, Date.now());\n    }.bind(this);\n\n    /**\n     * @private\n     * @type {import(\"./transform.js\").Transform}\n     */\n    this.coordinateToPixelTransform_ = createTransform();\n\n    /**\n     * @private\n     * @type {import(\"./transform.js\").Transform}\n     */\n    this.pixelToCoordinateTransform_ = createTransform();\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.frameIndex_ = 0;\n\n    /**\n     * @private\n     * @type {?FrameState}\n     */\n    this.frameState_ = null;\n\n    /**\n     * The extent at the previous 'moveend' event.\n     * @private\n     * @type {import(\"./extent.js\").Extent}\n     */\n    this.previousExtent_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"./events.js\").EventsKey}\n     */\n    this.viewPropertyListenerKey_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"./events.js\").EventsKey}\n     */\n    this.viewChangeListenerKey_ = null;\n\n    /**\n     * @private\n     * @type {Array<import(\"./events.js\").EventsKey>}\n     */\n    this.layerGroupPropertyListenerKeys_ = null;\n\n    /**\n     * @private\n     * @type {!HTMLElement}\n     */\n    this.viewport_ = document.createElement('div');\n    this.viewport_.className = 'ol-viewport' + (TOUCH ? ' ol-touch' : '');\n    this.viewport_.style.position = 'relative';\n    this.viewport_.style.overflow = 'hidden';\n    this.viewport_.style.width = '100%';\n    this.viewport_.style.height = '100%';\n    // prevent page zoom on IE >= 10 browsers\n    this.viewport_.style.msTouchAction = 'none';\n    this.viewport_.style.touchAction = 'none';\n\n    /**\n     * @private\n     * @type {!HTMLElement}\n     */\n    this.overlayContainer_ = document.createElement('div');\n    this.overlayContainer_.className = 'ol-overlaycontainer';\n    this.viewport_.appendChild(this.overlayContainer_);\n\n    /**\n     * @private\n     * @type {!HTMLElement}\n     */\n    this.overlayContainerStopEvent_ = document.createElement('div');\n    this.overlayContainerStopEvent_.className = 'ol-overlaycontainer-stopevent';\n    var overlayEvents = [\n      EventType.CLICK,\n      EventType.DBLCLICK,\n      EventType.MOUSEDOWN,\n      EventType.TOUCHSTART,\n      EventType.MSPOINTERDOWN,\n      MapBrowserEventType.POINTERDOWN,\n      EventType.MOUSEWHEEL,\n      EventType.WHEEL\n    ];\n    for (var i = 0, ii = overlayEvents.length; i < ii; ++i) {\n      listen(this.overlayContainerStopEvent_, overlayEvents[i], stopPropagation);\n    }\n    this.viewport_.appendChild(this.overlayContainerStopEvent_);\n\n    /**\n     * @private\n     * @type {MapBrowserEventHandler}\n     */\n    this.mapBrowserEventHandler_ = new MapBrowserEventHandler(this, options.moveTolerance);\n    for (var key in MapBrowserEventType) {\n      listen(this.mapBrowserEventHandler_, MapBrowserEventType[key],\n        this.handleMapBrowserEvent, this);\n    }\n\n    /**\n     * @private\n     * @type {HTMLElement|Document}\n     */\n    this.keyboardEventTarget_ = optionsInternal.keyboardEventTarget;\n\n    /**\n     * @private\n     * @type {Array<import(\"./events.js\").EventsKey>}\n     */\n    this.keyHandlerKeys_ = null;\n\n    listen(this.viewport_, EventType.CONTEXTMENU, this.handleBrowserEvent, this);\n    listen(this.viewport_, EventType.WHEEL, this.handleBrowserEvent, this);\n    listen(this.viewport_, EventType.MOUSEWHEEL, this.handleBrowserEvent, this);\n\n    /**\n     * @type {Collection<import(\"./control/Control.js\").default>}\n     * @protected\n     */\n    this.controls = optionsInternal.controls || new Collection();\n\n    /**\n     * @type {Collection<import(\"./interaction/Interaction.js\").default>}\n     * @protected\n     */\n    this.interactions = optionsInternal.interactions || new Collection();\n\n    /**\n     * @type {Collection<import(\"./Overlay.js\").default>}\n     * @private\n     */\n    this.overlays_ = optionsInternal.overlays;\n\n    /**\n     * A lookup of overlays by id.\n     * @private\n     * @type {Object<string, import(\"./Overlay.js\").default>}\n     */\n    this.overlayIdIndex_ = {};\n\n    /**\n     * @type {import(\"./renderer/Map.js\").default}\n     * @private\n     */\n    this.renderer_ = this.createRenderer();\n\n    /**\n     * @type {function(Event)|undefined}\n     * @private\n     */\n    this.handleResize_;\n\n    /**\n     * @private\n     * @type {import(\"./coordinate.js\").Coordinate}\n     */\n    this.focus_ = null;\n\n    /**\n     * @private\n     * @type {!Array<PostRenderFunction>}\n     */\n    this.postRenderFunctions_ = [];\n\n    /**\n     * @private\n     * @type {TileQueue}\n     */\n    this.tileQueue_ = new TileQueue(\n      this.getTilePriority.bind(this),\n      this.handleTileChange_.bind(this));\n\n    /**\n     * Uids of features to skip at rendering time.\n     * @type {Object<string, boolean>}\n     * @private\n     */\n    this.skippedFeatureUids_ = {};\n\n    listen(\n      this, getChangeEventType(MapProperty.LAYERGROUP),\n      this.handleLayerGroupChanged_, this);\n    listen(this, getChangeEventType(MapProperty.VIEW),\n      this.handleViewChanged_, this);\n    listen(this, getChangeEventType(MapProperty.SIZE),\n      this.handleSizeChanged_, this);\n    listen(this, getChangeEventType(MapProperty.TARGET),\n      this.handleTargetChanged_, this);\n\n    // setProperties will trigger the rendering of the map if the map\n    // is \"defined\" already.\n    this.setProperties(optionsInternal.values);\n\n    this.controls.forEach(\n      /**\n       * @param {import(\"./control/Control.js\").default} control Control.\n       * @this {PluggableMap}\n       */\n      (function(control) {\n        control.setMap(this);\n      }).bind(this));\n\n    listen(this.controls, CollectionEventType.ADD,\n      /**\n       * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n       */\n      function(event) {\n        event.element.setMap(this);\n      }, this);\n\n    listen(this.controls, CollectionEventType.REMOVE,\n      /**\n       * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n       */\n      function(event) {\n        event.element.setMap(null);\n      }, this);\n\n    this.interactions.forEach(\n      /**\n       * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction.\n       * @this {PluggableMap}\n       */\n      (function(interaction) {\n        interaction.setMap(this);\n      }).bind(this));\n\n    listen(this.interactions, CollectionEventType.ADD,\n      /**\n       * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n       */\n      function(event) {\n        event.element.setMap(this);\n      }, this);\n\n    listen(this.interactions, CollectionEventType.REMOVE,\n      /**\n       * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n       */\n      function(event) {\n        event.element.setMap(null);\n      }, this);\n\n    this.overlays_.forEach(this.addOverlayInternal_.bind(this));\n\n    listen(this.overlays_, CollectionEventType.ADD,\n      /**\n       * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n       */\n      function(event) {\n        this.addOverlayInternal_(/** @type {import(\"./Overlay.js\").default} */ (event.element));\n      }, this);\n\n    listen(this.overlays_, CollectionEventType.REMOVE,\n      /**\n       * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n       */\n      function(event) {\n        var overlay = /** @type {import(\"./Overlay.js\").default} */ (event.element);\n        var id = overlay.getId();\n        if (id !== undefined) {\n          delete this.overlayIdIndex_[id.toString()];\n        }\n        event.element.setMap(null);\n      }, this);\n\n  }\n\n  if ( BaseObject ) PluggableMap.__proto__ = BaseObject;\n  PluggableMap.prototype = Object.create( BaseObject && BaseObject.prototype );\n  PluggableMap.prototype.constructor = PluggableMap;\n\n  /**\n   * @abstract\n   * @return {import(\"./renderer/Map.js\").default} The map renderer\n   */\n  PluggableMap.prototype.createRenderer = function createRenderer () {\n    throw new Error('Use a map type that has a createRenderer method');\n  };\n\n  /**\n   * Add the given control to the map.\n   * @param {import(\"./control/Control.js\").default} control Control.\n   * @api\n   */\n  PluggableMap.prototype.addControl = function addControl (control) {\n    this.getControls().push(control);\n  };\n\n  /**\n   * Add the given interaction to the map.\n   * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction to add.\n   * @api\n   */\n  PluggableMap.prototype.addInteraction = function addInteraction (interaction) {\n    this.getInteractions().push(interaction);\n  };\n\n  /**\n   * Adds the given layer to the top of this map. If you want to add a layer\n   * elsewhere in the stack, use `getLayers()` and the methods available on\n   * {@link module:ol/Collection~Collection}.\n   * @param {import(\"./layer/Base.js\").default} layer Layer.\n   * @api\n   */\n  PluggableMap.prototype.addLayer = function addLayer (layer) {\n    var layers = this.getLayerGroup().getLayers();\n    layers.push(layer);\n  };\n\n  /**\n   * Add the given overlay to the map.\n   * @param {import(\"./Overlay.js\").default} overlay Overlay.\n   * @api\n   */\n  PluggableMap.prototype.addOverlay = function addOverlay (overlay) {\n    this.getOverlays().push(overlay);\n  };\n\n  /**\n   * This deals with map's overlay collection changes.\n   * @param {import(\"./Overlay.js\").default} overlay Overlay.\n   * @private\n   */\n  PluggableMap.prototype.addOverlayInternal_ = function addOverlayInternal_ (overlay) {\n    var id = overlay.getId();\n    if (id !== undefined) {\n      this.overlayIdIndex_[id.toString()] = overlay;\n    }\n    overlay.setMap(this);\n  };\n\n  /**\n   *\n   * @inheritDoc\n   */\n  PluggableMap.prototype.disposeInternal = function disposeInternal () {\n    this.mapBrowserEventHandler_.dispose();\n    unlisten(this.viewport_, EventType.CONTEXTMENU, this.handleBrowserEvent, this);\n    unlisten(this.viewport_, EventType.WHEEL, this.handleBrowserEvent, this);\n    unlisten(this.viewport_, EventType.MOUSEWHEEL, this.handleBrowserEvent, this);\n    if (this.handleResize_ !== undefined) {\n      removeEventListener(EventType.RESIZE, this.handleResize_, false);\n      this.handleResize_ = undefined;\n    }\n    if (this.animationDelayKey_) {\n      cancelAnimationFrame(this.animationDelayKey_);\n      this.animationDelayKey_ = undefined;\n    }\n    this.setTarget(null);\n    BaseObject.prototype.disposeInternal.call(this);\n  };\n\n  /**\n   * Detect features that intersect a pixel on the viewport, and execute a\n   * callback with each intersecting feature. Layers included in the detection can\n   * be configured through the `layerFilter` option in `opt_options`.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n   * @param {function(this: S, import(\"./Feature.js\").FeatureLike,\n   *     import(\"./layer/Layer.js\").default): T} callback Feature callback. The callback will be\n   *     called with two arguments. The first argument is one\n   *     {@link module:ol/Feature feature} or\n   *     {@link module:ol/render/Feature render feature} at the pixel, the second is\n   *     the {@link module:ol/layer/Layer layer} of the feature and will be null for\n   *     unmanaged layers. To stop detection, callback functions can return a\n   *     truthy value.\n   * @param {AtPixelOptions=} opt_options Optional options.\n   * @return {T|undefined} Callback result, i.e. the return value of last\n   * callback execution, or the first truthy callback return value.\n   * @template S,T\n   * @api\n   */\n  PluggableMap.prototype.forEachFeatureAtPixel = function forEachFeatureAtPixel (pixel, callback, opt_options) {\n    if (!this.frameState_) {\n      return;\n    }\n    var coordinate = this.getCoordinateFromPixel(pixel);\n    opt_options = opt_options !== undefined ? opt_options :\n      /** @type {AtPixelOptions} */ ({});\n    var hitTolerance = opt_options.hitTolerance !== undefined ?\n      opt_options.hitTolerance * this.frameState_.pixelRatio : 0;\n    var layerFilter = opt_options.layerFilter !== undefined ?\n      opt_options.layerFilter : TRUE;\n    return this.renderer_.forEachFeatureAtCoordinate(\n      coordinate, this.frameState_, hitTolerance, callback, null,\n      layerFilter, null);\n  };\n\n  /**\n   * Get all features that intersect a pixel on the viewport.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n   * @param {AtPixelOptions=} opt_options Optional options.\n   * @return {Array<import(\"./Feature.js\").FeatureLike>} The detected features or\n   * `null` if none were found.\n   * @api\n   */\n  PluggableMap.prototype.getFeaturesAtPixel = function getFeaturesAtPixel (pixel, opt_options) {\n    var features = null;\n    this.forEachFeatureAtPixel(pixel, function(feature) {\n      if (!features) {\n        features = [];\n      }\n      features.push(feature);\n    }, opt_options);\n    return features;\n  };\n\n  /**\n   * Detect layers that have a color value at a pixel on the viewport, and\n   * execute a callback with each matching layer. Layers included in the\n   * detection can be configured through `opt_layerFilter`.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n   * @param {function(this: S, import(\"./layer/Layer.js\").default, (Uint8ClampedArray|Uint8Array)): T} callback\n   *     Layer callback. This callback will receive two arguments: first is the\n   *     {@link module:ol/layer/Layer layer}, second argument is an array representing\n   *     [R, G, B, A] pixel values (0 - 255) and will be `null` for layer types\n   *     that do not currently support this argument. To stop detection, callback\n   *     functions can return a truthy value.\n   * @param {AtPixelOptions=} opt_options Configuration options.\n   * @return {T|undefined} Callback result, i.e. the return value of last\n   * callback execution, or the first truthy callback return value.\n   * @template S,T\n   * @api\n   */\n  PluggableMap.prototype.forEachLayerAtPixel = function forEachLayerAtPixel (pixel, callback, opt_options) {\n    if (!this.frameState_) {\n      return;\n    }\n    var options = opt_options || /** @type {AtPixelOptions} */ ({});\n    var hitTolerance = options.hitTolerance !== undefined ?\n      opt_options.hitTolerance * this.frameState_.pixelRatio : 0;\n    var layerFilter = options.layerFilter || TRUE;\n    return this.renderer_.forEachLayerAtPixel(\n      pixel, this.frameState_, hitTolerance, callback, null, layerFilter, null);\n  };\n\n  /**\n   * Detect if features intersect a pixel on the viewport. Layers included in the\n   * detection can be configured through `opt_layerFilter`.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n   * @param {AtPixelOptions=} opt_options Optional options.\n   * @return {boolean} Is there a feature at the given pixel?\n   * @template U\n   * @api\n   */\n  PluggableMap.prototype.hasFeatureAtPixel = function hasFeatureAtPixel (pixel, opt_options) {\n    if (!this.frameState_) {\n      return false;\n    }\n    var coordinate = this.getCoordinateFromPixel(pixel);\n    opt_options = opt_options !== undefined ? opt_options :\n      /** @type {AtPixelOptions} */ ({});\n    var layerFilter = opt_options.layerFilter !== undefined ? opt_options.layerFilter : TRUE;\n    var hitTolerance = opt_options.hitTolerance !== undefined ?\n      opt_options.hitTolerance * this.frameState_.pixelRatio : 0;\n    return this.renderer_.hasFeatureAtCoordinate(\n      coordinate, this.frameState_, hitTolerance, layerFilter, null);\n  };\n\n  /**\n   * Returns the coordinate in view projection for a browser event.\n   * @param {Event} event Event.\n   * @return {import(\"./coordinate.js\").Coordinate} Coordinate.\n   * @api\n   */\n  PluggableMap.prototype.getEventCoordinate = function getEventCoordinate (event) {\n    return this.getCoordinateFromPixel(this.getEventPixel(event));\n  };\n\n  /**\n   * Returns the map pixel position for a browser event relative to the viewport.\n   * @param {Event|TouchEvent} event Event.\n   * @return {import(\"./pixel.js\").Pixel} Pixel.\n   * @api\n   */\n  PluggableMap.prototype.getEventPixel = function getEventPixel (event) {\n    var viewportPosition = this.viewport_.getBoundingClientRect();\n    var eventPosition = 'changedTouches' in event ?\n      /** @type {TouchEvent} */ (event).changedTouches[0] :\n      /** @type {MouseEvent} */ (event);\n\n    return [\n      eventPosition.clientX - viewportPosition.left,\n      eventPosition.clientY - viewportPosition.top\n    ];\n  };\n\n  /**\n   * Get the target in which this map is rendered.\n   * Note that this returns what is entered as an option or in setTarget:\n   * if that was an element, it returns an element; if a string, it returns that.\n   * @return {HTMLElement|string|undefined} The Element or id of the Element that the\n   *     map is rendered in.\n   * @observable\n   * @api\n   */\n  PluggableMap.prototype.getTarget = function getTarget () {\n    return /** @type {HTMLElement|string|undefined} */ (this.get(MapProperty.TARGET));\n  };\n\n  /**\n   * Get the DOM element into which this map is rendered. In contrast to\n   * `getTarget` this method always return an `Element`, or `null` if the\n   * map has no target.\n   * @return {HTMLElement} The element that the map is rendered in.\n   * @api\n   */\n  PluggableMap.prototype.getTargetElement = function getTargetElement () {\n    var target = this.getTarget();\n    if (target !== undefined) {\n      return typeof target === 'string' ? document.getElementById(target) : target;\n    } else {\n      return null;\n    }\n  };\n\n  /**\n   * Get the coordinate for a given pixel.  This returns a coordinate in the\n   * map view projection.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel position in the map viewport.\n   * @return {import(\"./coordinate.js\").Coordinate} The coordinate for the pixel position.\n   * @api\n   */\n  PluggableMap.prototype.getCoordinateFromPixel = function getCoordinateFromPixel (pixel) {\n    var frameState = this.frameState_;\n    if (!frameState) {\n      return null;\n    } else {\n      return applyTransform(frameState.pixelToCoordinateTransform, pixel.slice());\n    }\n  };\n\n  /**\n   * Get the map controls. Modifying this collection changes the controls\n   * associated with the map.\n   * @return {Collection<import(\"./control/Control.js\").default>} Controls.\n   * @api\n   */\n  PluggableMap.prototype.getControls = function getControls () {\n    return this.controls;\n  };\n\n  /**\n   * Get the map overlays. Modifying this collection changes the overlays\n   * associated with the map.\n   * @return {Collection<import(\"./Overlay.js\").default>} Overlays.\n   * @api\n   */\n  PluggableMap.prototype.getOverlays = function getOverlays () {\n    return this.overlays_;\n  };\n\n  /**\n   * Get an overlay by its identifier (the value returned by overlay.getId()).\n   * Note that the index treats string and numeric identifiers as the same. So\n   * `map.getOverlayById(2)` will return an overlay with id `'2'` or `2`.\n   * @param {string|number} id Overlay identifier.\n   * @return {import(\"./Overlay.js\").default} Overlay.\n   * @api\n   */\n  PluggableMap.prototype.getOverlayById = function getOverlayById (id) {\n    var overlay = this.overlayIdIndex_[id.toString()];\n    return overlay !== undefined ? overlay : null;\n  };\n\n  /**\n   * Get the map interactions. Modifying this collection changes the interactions\n   * associated with the map.\n   *\n   * Interactions are used for e.g. pan, zoom and rotate.\n   * @return {Collection<import(\"./interaction/Interaction.js\").default>} Interactions.\n   * @api\n   */\n  PluggableMap.prototype.getInteractions = function getInteractions () {\n    return this.interactions;\n  };\n\n  /**\n   * Get the layergroup associated with this map.\n   * @return {LayerGroup} A layer group containing the layers in this map.\n   * @observable\n   * @api\n   */\n  PluggableMap.prototype.getLayerGroup = function getLayerGroup () {\n    return (\n      /** @type {LayerGroup} */ (this.get(MapProperty.LAYERGROUP))\n    );\n  };\n\n  /**\n   * Get the collection of layers associated with this map.\n   * @return {!Collection<import(\"./layer/Base.js\").default>} Layers.\n   * @api\n   */\n  PluggableMap.prototype.getLayers = function getLayers () {\n    var layers = this.getLayerGroup().getLayers();\n    return layers;\n  };\n\n  /**\n   * Get the pixel for a coordinate.  This takes a coordinate in the map view\n   * projection and returns the corresponding pixel.\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate A map coordinate.\n   * @return {import(\"./pixel.js\").Pixel} A pixel position in the map viewport.\n   * @api\n   */\n  PluggableMap.prototype.getPixelFromCoordinate = function getPixelFromCoordinate (coordinate) {\n    var frameState = this.frameState_;\n    if (!frameState) {\n      return null;\n    } else {\n      return applyTransform(frameState.coordinateToPixelTransform, coordinate.slice(0, 2));\n    }\n  };\n\n  /**\n   * Get the map renderer.\n   * @return {import(\"./renderer/Map.js\").default} Renderer\n   */\n  PluggableMap.prototype.getRenderer = function getRenderer () {\n    return this.renderer_;\n  };\n\n  /**\n   * Get the size of this map.\n   * @return {import(\"./size.js\").Size|undefined} The size in pixels of the map in the DOM.\n   * @observable\n   * @api\n   */\n  PluggableMap.prototype.getSize = function getSize () {\n    return (\n      /** @type {import(\"./size.js\").Size|undefined} */ (this.get(MapProperty.SIZE))\n    );\n  };\n\n  /**\n   * Get the view associated with this map. A view manages properties such as\n   * center and resolution.\n   * @return {View} The view that controls this map.\n   * @observable\n   * @api\n   */\n  PluggableMap.prototype.getView = function getView () {\n    return (\n      /** @type {View} */ (this.get(MapProperty.VIEW))\n    );\n  };\n\n  /**\n   * Get the element that serves as the map viewport.\n   * @return {HTMLElement} Viewport.\n   * @api\n   */\n  PluggableMap.prototype.getViewport = function getViewport () {\n    return this.viewport_;\n  };\n\n  /**\n   * Get the element that serves as the container for overlays.  Elements added to\n   * this container will let mousedown and touchstart events through to the map,\n   * so clicks and gestures on an overlay will trigger {@link module:ol/MapBrowserEvent~MapBrowserEvent}\n   * events.\n   * @return {!HTMLElement} The map's overlay container.\n   */\n  PluggableMap.prototype.getOverlayContainer = function getOverlayContainer () {\n    return this.overlayContainer_;\n  };\n\n  /**\n   * Get the element that serves as a container for overlays that don't allow\n   * event propagation. Elements added to this container won't let mousedown and\n   * touchstart events through to the map, so clicks and gestures on an overlay\n   * don't trigger any {@link module:ol/MapBrowserEvent~MapBrowserEvent}.\n   * @return {!HTMLElement} The map's overlay container that stops events.\n   */\n  PluggableMap.prototype.getOverlayContainerStopEvent = function getOverlayContainerStopEvent () {\n    return this.overlayContainerStopEvent_;\n  };\n\n  /**\n   * @param {import(\"./Tile.js\").default} tile Tile.\n   * @param {string} tileSourceKey Tile source key.\n   * @param {import(\"./coordinate.js\").Coordinate} tileCenter Tile center.\n   * @param {number} tileResolution Tile resolution.\n   * @return {number} Tile priority.\n   */\n  PluggableMap.prototype.getTilePriority = function getTilePriority (tile, tileSourceKey, tileCenter, tileResolution) {\n    // Filter out tiles at higher zoom levels than the current zoom level, or that\n    // are outside the visible extent.\n    var frameState = this.frameState_;\n    if (!frameState || !(tileSourceKey in frameState.wantedTiles)) {\n      return DROP;\n    }\n    if (!frameState.wantedTiles[tileSourceKey][tile.getKey()]) {\n      return DROP;\n    }\n    // Prioritize the highest zoom level tiles closest to the focus.\n    // Tiles at higher zoom levels are prioritized using Math.log(tileResolution).\n    // Within a zoom level, tiles are prioritized by the distance in pixels\n    // between the center of the tile and the focus.  The factor of 65536 means\n    // that the prioritization should behave as desired for tiles up to\n    // 65536 * Math.log(2) = 45426 pixels from the focus.\n    var deltaX = tileCenter[0] - frameState.focus[0];\n    var deltaY = tileCenter[1] - frameState.focus[1];\n    return 65536 * Math.log(tileResolution) +\n        Math.sqrt(deltaX * deltaX + deltaY * deltaY) / tileResolution;\n  };\n\n  /**\n   * @param {Event} browserEvent Browser event.\n   * @param {string=} opt_type Type.\n   */\n  PluggableMap.prototype.handleBrowserEvent = function handleBrowserEvent (browserEvent, opt_type) {\n    var type = opt_type || browserEvent.type;\n    var mapBrowserEvent = new MapBrowserEvent(type, this, browserEvent);\n    this.handleMapBrowserEvent(mapBrowserEvent);\n  };\n\n  /**\n   * @param {MapBrowserEvent} mapBrowserEvent The event to handle.\n   */\n  PluggableMap.prototype.handleMapBrowserEvent = function handleMapBrowserEvent (mapBrowserEvent) {\n    if (!this.frameState_) {\n      // With no view defined, we cannot translate pixels into geographical\n      // coordinates so interactions cannot be used.\n      return;\n    }\n    this.focus_ = mapBrowserEvent.coordinate;\n    mapBrowserEvent.frameState = this.frameState_;\n    var interactionsArray = this.getInteractions().getArray();\n    if (this.dispatchEvent(mapBrowserEvent) !== false) {\n      for (var i = interactionsArray.length - 1; i >= 0; i--) {\n        var interaction = interactionsArray[i];\n        if (!interaction.getActive()) {\n          continue;\n        }\n        var cont = interaction.handleEvent(mapBrowserEvent);\n        if (!cont) {\n          break;\n        }\n      }\n    }\n  };\n\n  /**\n   * @protected\n   */\n  PluggableMap.prototype.handlePostRender = function handlePostRender () {\n\n    var frameState = this.frameState_;\n\n    // Manage the tile queue\n    // Image loads are expensive and a limited resource, so try to use them\n    // efficiently:\n    // * When the view is static we allow a large number of parallel tile loads\n    //   to complete the frame as quickly as possible.\n    // * When animating or interacting, image loads can cause janks, so we reduce\n    //   the maximum number of loads per frame and limit the number of parallel\n    //   tile loads to remain reactive to view changes and to reduce the chance of\n    //   loading tiles that will quickly disappear from view.\n    var tileQueue = this.tileQueue_;\n    if (!tileQueue.isEmpty()) {\n      var maxTotalLoading = this.maxTilesLoading_;\n      var maxNewLoads = maxTotalLoading;\n      if (frameState) {\n        var hints = frameState.viewHints;\n        if (hints[ViewHint.ANIMATING]) {\n          maxTotalLoading = this.loadTilesWhileAnimating_ ? 8 : 0;\n          maxNewLoads = 2;\n        }\n        if (hints[ViewHint.INTERACTING]) {\n          maxTotalLoading = this.loadTilesWhileInteracting_ ? 8 : 0;\n          maxNewLoads = 2;\n        }\n      }\n      if (tileQueue.getTilesLoading() < maxTotalLoading) {\n        tileQueue.reprioritize(); // FIXME only call if view has changed\n        tileQueue.loadMoreTiles(maxTotalLoading, maxNewLoads);\n      }\n    }\n    if (frameState && this.hasListener(RenderEventType.RENDERCOMPLETE) && !frameState.animate &&\n        !this.tileQueue_.getTilesLoading() && !getLoading(this.getLayers().getArray())) {\n      this.renderer_.dispatchRenderEvent(RenderEventType.RENDERCOMPLETE, frameState);\n    }\n\n    var postRenderFunctions = this.postRenderFunctions_;\n    for (var i = 0, ii = postRenderFunctions.length; i < ii; ++i) {\n      postRenderFunctions[i](this, frameState);\n    }\n    postRenderFunctions.length = 0;\n  };\n\n  /**\n   * @private\n   */\n  PluggableMap.prototype.handleSizeChanged_ = function handleSizeChanged_ () {\n    this.render();\n  };\n\n  /**\n   * @private\n   */\n  PluggableMap.prototype.handleTargetChanged_ = function handleTargetChanged_ () {\n    // target may be undefined, null, a string or an Element.\n    // If it's a string we convert it to an Element before proceeding.\n    // If it's not now an Element we remove the viewport from the DOM.\n    // If it's an Element we append the viewport element to it.\n\n    var targetElement;\n    if (this.getTarget()) {\n      targetElement = this.getTargetElement();\n    }\n\n    if (this.keyHandlerKeys_) {\n      for (var i = 0, ii = this.keyHandlerKeys_.length; i < ii; ++i) {\n        unlistenByKey(this.keyHandlerKeys_[i]);\n      }\n      this.keyHandlerKeys_ = null;\n    }\n\n    if (!targetElement) {\n      this.renderer_.removeLayerRenderers();\n      removeNode(this.viewport_);\n      if (this.handleResize_ !== undefined) {\n        removeEventListener(EventType.RESIZE, this.handleResize_, false);\n        this.handleResize_ = undefined;\n      }\n    } else {\n      targetElement.appendChild(this.viewport_);\n\n      var keyboardEventTarget = !this.keyboardEventTarget_ ?\n        targetElement : this.keyboardEventTarget_;\n      this.keyHandlerKeys_ = [\n        listen(keyboardEventTarget, EventType.KEYDOWN, this.handleBrowserEvent, this),\n        listen(keyboardEventTarget, EventType.KEYPRESS, this.handleBrowserEvent, this)\n      ];\n\n      if (!this.handleResize_) {\n        this.handleResize_ = this.updateSize.bind(this);\n        window.addEventListener(EventType.RESIZE, this.handleResize_, false);\n      }\n    }\n\n    this.updateSize();\n    // updateSize calls setSize, so no need to call this.render\n    // ourselves here.\n  };\n\n  /**\n   * @private\n   */\n  PluggableMap.prototype.handleTileChange_ = function handleTileChange_ () {\n    this.render();\n  };\n\n  /**\n   * @private\n   */\n  PluggableMap.prototype.handleViewPropertyChanged_ = function handleViewPropertyChanged_ () {\n    this.render();\n  };\n\n  /**\n   * @private\n   */\n  PluggableMap.prototype.handleViewChanged_ = function handleViewChanged_ () {\n    if (this.viewPropertyListenerKey_) {\n      unlistenByKey(this.viewPropertyListenerKey_);\n      this.viewPropertyListenerKey_ = null;\n    }\n    if (this.viewChangeListenerKey_) {\n      unlistenByKey(this.viewChangeListenerKey_);\n      this.viewChangeListenerKey_ = null;\n    }\n    var view = this.getView();\n    if (view) {\n      this.viewport_.setAttribute('data-view', getUid(view));\n      this.viewPropertyListenerKey_ = listen(\n        view, ObjectEventType.PROPERTYCHANGE,\n        this.handleViewPropertyChanged_, this);\n      this.viewChangeListenerKey_ = listen(\n        view, EventType.CHANGE,\n        this.handleViewPropertyChanged_, this);\n    }\n    this.render();\n  };\n\n  /**\n   * @private\n   */\n  PluggableMap.prototype.handleLayerGroupChanged_ = function handleLayerGroupChanged_ () {\n    if (this.layerGroupPropertyListenerKeys_) {\n      this.layerGroupPropertyListenerKeys_.forEach(unlistenByKey);\n      this.layerGroupPropertyListenerKeys_ = null;\n    }\n    var layerGroup = this.getLayerGroup();\n    if (layerGroup) {\n      this.layerGroupPropertyListenerKeys_ = [\n        listen(\n          layerGroup, ObjectEventType.PROPERTYCHANGE,\n          this.render, this),\n        listen(\n          layerGroup, EventType.CHANGE,\n          this.render, this)\n      ];\n    }\n    this.render();\n  };\n\n  /**\n   * @return {boolean} Is rendered.\n   */\n  PluggableMap.prototype.isRendered = function isRendered () {\n    return !!this.frameState_;\n  };\n\n  /**\n   * Requests an immediate render in a synchronous manner.\n   * @api\n   */\n  PluggableMap.prototype.renderSync = function renderSync () {\n    if (this.animationDelayKey_) {\n      cancelAnimationFrame(this.animationDelayKey_);\n    }\n    this.animationDelay_();\n  };\n\n  /**\n   * Request a map rendering (at the next animation frame).\n   * @api\n   */\n  PluggableMap.prototype.render = function render () {\n    if (this.animationDelayKey_ === undefined) {\n      this.animationDelayKey_ = requestAnimationFrame(this.animationDelay_);\n    }\n  };\n\n  /**\n   * Remove the given control from the map.\n   * @param {import(\"./control/Control.js\").default} control Control.\n   * @return {import(\"./control/Control.js\").default|undefined} The removed control (or undefined\n   *     if the control was not found).\n   * @api\n   */\n  PluggableMap.prototype.removeControl = function removeControl (control) {\n    return this.getControls().remove(control);\n  };\n\n  /**\n   * Remove the given interaction from the map.\n   * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction to remove.\n   * @return {import(\"./interaction/Interaction.js\").default|undefined} The removed interaction (or\n   *     undefined if the interaction was not found).\n   * @api\n   */\n  PluggableMap.prototype.removeInteraction = function removeInteraction (interaction) {\n    return this.getInteractions().remove(interaction);\n  };\n\n  /**\n   * Removes the given layer from the map.\n   * @param {import(\"./layer/Base.js\").default} layer Layer.\n   * @return {import(\"./layer/Base.js\").default|undefined} The removed layer (or undefined if the\n   *     layer was not found).\n   * @api\n   */\n  PluggableMap.prototype.removeLayer = function removeLayer (layer) {\n    var layers = this.getLayerGroup().getLayers();\n    return layers.remove(layer);\n  };\n\n  /**\n   * Remove the given overlay from the map.\n   * @param {import(\"./Overlay.js\").default} overlay Overlay.\n   * @return {import(\"./Overlay.js\").default|undefined} The removed overlay (or undefined\n   *     if the overlay was not found).\n   * @api\n   */\n  PluggableMap.prototype.removeOverlay = function removeOverlay (overlay) {\n    return this.getOverlays().remove(overlay);\n  };\n\n  /**\n   * @param {number} time Time.\n   * @private\n   */\n  PluggableMap.prototype.renderFrame_ = function renderFrame_ (time) {\n    var viewState;\n\n    var size = this.getSize();\n    var view = this.getView();\n    var extent = createEmpty();\n    var previousFrameState = this.frameState_;\n    /** @type {?FrameState} */\n    var frameState = null;\n    if (size !== undefined && hasArea(size) && view && view.isDef()) {\n      var viewHints = view.getHints(this.frameState_ ? this.frameState_.viewHints : undefined);\n      var layerStatesArray = this.getLayerGroup().getLayerStatesArray();\n      var layerStates = {};\n      for (var i = 0, ii = layerStatesArray.length; i < ii; ++i) {\n        layerStates[getUid(layerStatesArray[i].layer)] = layerStatesArray[i];\n      }\n      viewState = view.getState(this.pixelRatio_);\n      frameState = /** @type {FrameState} */ ({\n        animate: false,\n        coordinateToPixelTransform: this.coordinateToPixelTransform_,\n        extent: extent,\n        focus: this.focus_ ? this.focus_ : viewState.center,\n        index: this.frameIndex_++,\n        layerStates: layerStates,\n        layerStatesArray: layerStatesArray,\n        pixelRatio: this.pixelRatio_,\n        pixelToCoordinateTransform: this.pixelToCoordinateTransform_,\n        postRenderFunctions: [],\n        size: size,\n        skippedFeatureUids: this.skippedFeatureUids_,\n        tileQueue: this.tileQueue_,\n        time: time,\n        usedTiles: {},\n        viewState: viewState,\n        viewHints: viewHints,\n        wantedTiles: {}\n      });\n    }\n\n    if (frameState) {\n      frameState.extent = getForViewAndSize(viewState.center,\n        viewState.resolution, viewState.rotation, frameState.size, extent);\n    }\n\n    this.frameState_ = frameState;\n    this.renderer_.renderFrame(frameState);\n\n    if (frameState) {\n      if (frameState.animate) {\n        this.render();\n      }\n      Array.prototype.push.apply(this.postRenderFunctions_, frameState.postRenderFunctions);\n\n      if (previousFrameState) {\n        var moveStart = !this.previousExtent_ ||\n                    (!isEmpty(this.previousExtent_) &&\n                    !equals(frameState.extent, this.previousExtent_));\n        if (moveStart) {\n          this.dispatchEvent(\n            new MapEvent(MapEventType.MOVESTART, this, previousFrameState));\n          this.previousExtent_ = createOrUpdateEmpty(this.previousExtent_);\n        }\n      }\n\n      var idle = this.previousExtent_ &&\n          !frameState.viewHints[ViewHint.ANIMATING] &&\n          !frameState.viewHints[ViewHint.INTERACTING] &&\n          !equals(frameState.extent, this.previousExtent_);\n\n      if (idle) {\n        this.dispatchEvent(new MapEvent(MapEventType.MOVEEND, this, frameState));\n        clone(frameState.extent, this.previousExtent_);\n      }\n    }\n\n    this.dispatchEvent(new MapEvent(MapEventType.POSTRENDER, this, frameState));\n\n    setTimeout(this.handlePostRender.bind(this), 0);\n\n  };\n\n  /**\n   * Sets the layergroup of this map.\n   * @param {LayerGroup} layerGroup A layer group containing the layers in this map.\n   * @observable\n   * @api\n   */\n  PluggableMap.prototype.setLayerGroup = function setLayerGroup (layerGroup) {\n    this.set(MapProperty.LAYERGROUP, layerGroup);\n  };\n\n  /**\n   * Set the size of this map.\n   * @param {import(\"./size.js\").Size|undefined} size The size in pixels of the map in the DOM.\n   * @observable\n   * @api\n   */\n  PluggableMap.prototype.setSize = function setSize (size) {\n    this.set(MapProperty.SIZE, size);\n  };\n\n  /**\n   * Set the target element to render this map into.\n   * @param {HTMLElement|string|undefined} target The Element or id of the Element\n   *     that the map is rendered in.\n   * @observable\n   * @api\n   */\n  PluggableMap.prototype.setTarget = function setTarget (target) {\n    this.set(MapProperty.TARGET, target);\n  };\n\n  /**\n   * Set the view for this map.\n   * @param {View} view The view that controls this map.\n   * @observable\n   * @api\n   */\n  PluggableMap.prototype.setView = function setView (view) {\n    this.set(MapProperty.VIEW, view);\n  };\n\n  /**\n   * @param {import(\"./Feature.js\").default} feature Feature.\n   */\n  PluggableMap.prototype.skipFeature = function skipFeature (feature) {\n    this.skippedFeatureUids_[getUid(feature)] = true;\n    this.render();\n  };\n\n  /**\n   * Force a recalculation of the map viewport size.  This should be called when\n   * third-party code changes the size of the map viewport.\n   * @api\n   */\n  PluggableMap.prototype.updateSize = function updateSize () {\n    var targetElement = this.getTargetElement();\n\n    if (!targetElement) {\n      this.setSize(undefined);\n    } else {\n      var computedStyle = getComputedStyle(targetElement);\n      this.setSize([\n        targetElement.offsetWidth -\n            parseFloat(computedStyle['borderLeftWidth']) -\n            parseFloat(computedStyle['paddingLeft']) -\n            parseFloat(computedStyle['paddingRight']) -\n            parseFloat(computedStyle['borderRightWidth']),\n        targetElement.offsetHeight -\n            parseFloat(computedStyle['borderTopWidth']) -\n            parseFloat(computedStyle['paddingTop']) -\n            parseFloat(computedStyle['paddingBottom']) -\n            parseFloat(computedStyle['borderBottomWidth'])\n      ]);\n    }\n  };\n\n  /**\n   * @param {import(\"./Feature.js\").default} feature Feature.\n   */\n  PluggableMap.prototype.unskipFeature = function unskipFeature (feature) {\n    delete this.skippedFeatureUids_[getUid(feature)];\n    this.render();\n  };\n\n  return PluggableMap;\n}(BaseObject));\n\n\n/**\n * @param {MapOptions} options Map options.\n * @return {MapOptionsInternal} Internal map options.\n */\nfunction createOptionsInternal(options) {\n\n  /**\n   * @type {HTMLElement|Document}\n   */\n  var keyboardEventTarget = null;\n  if (options.keyboardEventTarget !== undefined) {\n    keyboardEventTarget = typeof options.keyboardEventTarget === 'string' ?\n      document.getElementById(options.keyboardEventTarget) :\n      options.keyboardEventTarget;\n  }\n\n  /**\n   * @type {Object<string, *>}\n   */\n  var values = {};\n\n  var layerGroup = options.layers && typeof /** @type {?} */ (options.layers).getLayers === 'function' ?\n    /** @type {LayerGroup} */ (options.layers) : new LayerGroup({layers: /** @type {Collection} */ (options.layers)});\n  values[MapProperty.LAYERGROUP] = layerGroup;\n\n  values[MapProperty.TARGET] = options.target;\n\n  values[MapProperty.VIEW] = options.view !== undefined ?\n    options.view : new View();\n\n  var controls;\n  if (options.controls !== undefined) {\n    if (Array.isArray(options.controls)) {\n      controls = new Collection(options.controls.slice());\n    } else {\n      assert(typeof /** @type {?} */ (options.controls).getArray === 'function',\n        47); // Expected `controls` to be an array or an `import(\"./Collection.js\").Collection`\n      controls = /** @type {Collection} */ (options.controls);\n    }\n  }\n\n  var interactions;\n  if (options.interactions !== undefined) {\n    if (Array.isArray(options.interactions)) {\n      interactions = new Collection(options.interactions.slice());\n    } else {\n      assert(typeof /** @type {?} */ (options.interactions).getArray === 'function',\n        48); // Expected `interactions` to be an array or an `import(\"./Collection.js\").Collection`\n      interactions = /** @type {Collection} */ (options.interactions);\n    }\n  }\n\n  var overlays;\n  if (options.overlays !== undefined) {\n    if (Array.isArray(options.overlays)) {\n      overlays = new Collection(options.overlays.slice());\n    } else {\n      assert(typeof /** @type {?} */ (options.overlays).getArray === 'function',\n        49); // Expected `overlays` to be an array or an `import(\"./Collection.js\").Collection`\n      overlays = options.overlays;\n    }\n  } else {\n    overlays = new Collection();\n  }\n\n  return {\n    controls: controls,\n    interactions: interactions,\n    keyboardEventTarget: keyboardEventTarget,\n    overlays: overlays,\n    values: values\n  };\n\n}\nexport default PluggableMap;\n\n/**\n * @param  {Array<import(\"./layer/Base.js\").default>} layers Layers.\n * @return {boolean} Layers have sources that are still loading.\n */\nfunction getLoading(layers) {\n  for (var i = 0, ii = layers.length; i < ii; ++i) {\n    var layer = layers[i];\n    if (typeof /** @type {?} */ (layer).getLayers === 'function') {\n      return getLoading(/** @type {LayerGroup} */ (layer).getLayers().getArray());\n    } else {\n      var source = /** @type {import(\"./layer/Layer.js\").default} */ (\n        layer).getSource();\n      if (source && source.loading) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\n//# sourceMappingURL=PluggableMap.js.map","/**\n * @module ol/Map\n */\nimport PluggableMap from './PluggableMap.js';\nimport {defaults as defaultControls} from './control/util.js';\nimport {defaults as defaultInteractions} from './interaction.js';\nimport {assign} from './obj.js';\nimport CanvasImageLayerRenderer from './renderer/canvas/ImageLayer.js';\nimport CanvasMapRenderer from './renderer/canvas/Map.js';\nimport CanvasTileLayerRenderer from './renderer/canvas/TileLayer.js';\nimport CanvasVectorLayerRenderer from './renderer/canvas/VectorLayer.js';\nimport CanvasVectorTileLayerRenderer from './renderer/canvas/VectorTileLayer.js';\n\n/**\n * @classdesc\n * The map is the core component of OpenLayers. For a map to render, a view,\n * one or more layers, and a target container are needed:\n *\n *     import Map from 'ol/Map';\n *     import View from 'ol/View';\n *     import TileLayer from 'ol/layer/Tile';\n *     import OSM from 'ol/source/OSM';\n *\n *     var map = new Map({\n *       view: new View({\n *         center: [0, 0],\n *         zoom: 1\n *       }),\n *       layers: [\n *         new TileLayer({\n *           source: new OSM()\n *         })\n *       ],\n *       target: 'map'\n *     });\n *\n * The above snippet creates a map using a {@link module:ol/layer/Tile} to\n * display {@link module:ol/source/OSM~OSM} OSM data and render it to a DOM\n * element with the id `map`.\n *\n * The constructor places a viewport container (with CSS class name\n * `ol-viewport`) in the target element (see `getViewport()`), and then two\n * further elements within the viewport: one with CSS class name\n * `ol-overlaycontainer-stopevent` for controls and some overlays, and one with\n * CSS class name `ol-overlaycontainer` for other overlays (see the `stopEvent`\n * option of {@link module:ol/Overlay~Overlay} for the difference). The map\n * itself is placed in a further element within the viewport.\n *\n * Layers are stored as a {@link module:ol/Collection~Collection} in\n * layerGroups. A top-level group is provided by the library. This is what is\n * accessed by `getLayerGroup` and `setLayerGroup`. Layers entered in the\n * options are added to this group, and `addLayer` and `removeLayer` change the\n * layer collection in the group. `getLayers` is a convenience function for\n * `getLayerGroup().getLayers()`. Note that {@link module:ol/layer/Group~Group}\n * is a subclass of {@link module:ol/layer/Base}, so layers entered in the\n * options or added with `addLayer` can be groups, which can contain further\n * groups, and so on.\n *\n * @fires import(\"./MapBrowserEvent.js\").MapBrowserEvent\n * @fires import(\"./MapEvent.js\").MapEvent\n * @fires module:ol/render/Event~RenderEvent#postcompose\n * @fires module:ol/render/Event~RenderEvent#precompose\n * @api\n */\nvar Map = /*@__PURE__*/(function (PluggableMap) {\n  function Map(options) {\n    options = assign({}, options);\n    if (!options.controls) {\n      options.controls = defaultControls();\n    }\n    if (!options.interactions) {\n      options.interactions = defaultInteractions();\n    }\n\n    PluggableMap.call(this, options);\n  }\n\n  if ( PluggableMap ) Map.__proto__ = PluggableMap;\n  Map.prototype = Object.create( PluggableMap && PluggableMap.prototype );\n  Map.prototype.constructor = Map;\n\n  Map.prototype.createRenderer = function createRenderer () {\n    var renderer = new CanvasMapRenderer(this);\n    renderer.registerLayerRenderers([\n      CanvasImageLayerRenderer,\n      CanvasTileLayerRenderer,\n      CanvasVectorLayerRenderer,\n      CanvasVectorTileLayerRenderer\n    ]);\n    return renderer;\n  };\n\n  return Map;\n}(PluggableMap));\n\n\nexport default Map;\n\n//# sourceMappingURL=Map.js.map","/**\n * @module ol/MapEvent\n */\nimport Event from './events/Event.js';\n\n/**\n * @classdesc\n * Events emitted as map events are instances of this type.\n * See {@link module:ol/PluggableMap~PluggableMap} for which events trigger a map event.\n */\nvar MapEvent = /*@__PURE__*/(function (Event) {\n  function MapEvent(type, map, opt_frameState) {\n\n    Event.call(this, type);\n\n    /**\n     * The map where the event occurred.\n     * @type {import(\"./PluggableMap.js\").default}\n     * @api\n     */\n    this.map = map;\n\n    /**\n     * The frame state at the time of the event.\n     * @type {?import(\"./PluggableMap.js\").FrameState}\n     * @api\n     */\n    this.frameState = opt_frameState !== undefined ? opt_frameState : null;\n\n  }\n\n  if ( Event ) MapEvent.__proto__ = Event;\n  MapEvent.prototype = Object.create( Event && Event.prototype );\n  MapEvent.prototype.constructor = MapEvent;\n\n  return MapEvent;\n}(Event));\n\nexport default MapEvent;\n\n//# sourceMappingURL=MapEvent.js.map","/**\n * @module ol/ObjectEventType\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  /**\n   * Triggered when a property is changed.\n   * @event module:ol/Object.ObjectEvent#propertychange\n   * @api\n   */\n  PROPERTYCHANGE: 'propertychange'\n};\n\n//# sourceMappingURL=ObjectEventType.js.map","/**\n * @module ol/MapBrowserPointerEvent\n */\nimport MapBrowserEvent from './MapBrowserEvent.js';\n\nvar MapBrowserPointerEvent = /*@__PURE__*/(function (MapBrowserEvent) {\n  function MapBrowserPointerEvent(type, map, pointerEvent, opt_dragging, opt_frameState) {\n\n    MapBrowserEvent.call(this, type, map, pointerEvent.originalEvent, opt_dragging, opt_frameState);\n\n    /**\n     * @const\n     * @type {import(\"./pointer/PointerEvent.js\").default}\n     */\n    this.pointerEvent = pointerEvent;\n\n  }\n\n  if ( MapBrowserEvent ) MapBrowserPointerEvent.__proto__ = MapBrowserEvent;\n  MapBrowserPointerEvent.prototype = Object.create( MapBrowserEvent && MapBrowserEvent.prototype );\n  MapBrowserPointerEvent.prototype.constructor = MapBrowserPointerEvent;\n\n  return MapBrowserPointerEvent;\n}(MapBrowserEvent));\n\nexport default MapBrowserPointerEvent;\n\n//# sourceMappingURL=MapBrowserPointerEvent.js.map","/**\n * @module ol/Object\n */\nimport {getUid} from './util.js';\nimport ObjectEventType from './ObjectEventType.js';\nimport Observable from './Observable.js';\nimport Event from './events/Event.js';\nimport {assign} from './obj.js';\n\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/Object~BaseObject} instances are instances of this type.\n */\nexport var ObjectEvent = /*@__PURE__*/(function (Event) {\n  function ObjectEvent(type, key, oldValue) {\n    Event.call(this, type);\n\n    /**\n     * The name of the property whose value is changing.\n     * @type {string}\n     * @api\n     */\n    this.key = key;\n\n    /**\n     * The old value. To get the new value use `e.target.get(e.key)` where\n     * `e` is the event object.\n     * @type {*}\n     * @api\n     */\n    this.oldValue = oldValue;\n\n  }\n\n  if ( Event ) ObjectEvent.__proto__ = Event;\n  ObjectEvent.prototype = Object.create( Event && Event.prototype );\n  ObjectEvent.prototype.constructor = ObjectEvent;\n\n  return ObjectEvent;\n}(Event));\n\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Most non-trivial classes inherit from this.\n *\n * This extends {@link module:ol/Observable} with observable\n * properties, where each property is observable as well as the object as a\n * whole.\n *\n * Classes that inherit from this have pre-defined properties, to which you can\n * add your owns. The pre-defined properties are listed in this documentation as\n * 'Observable Properties', and have their own accessors; for example,\n * {@link module:ol/Map~Map} has a `target` property, accessed with\n * `getTarget()` and changed with `setTarget()`. Not all properties are however\n * settable. There are also general-purpose accessors `get()` and `set()`. For\n * example, `get('target')` is equivalent to `getTarget()`.\n *\n * The `set` accessors trigger a change event, and you can monitor this by\n * registering a listener. For example, {@link module:ol/View~View} has a\n * `center` property, so `view.on('change:center', function(evt) {...});` would\n * call the function whenever the value of the center property changes. Within\n * the function, `evt.target` would be the view, so `evt.target.getCenter()`\n * would return the new center.\n *\n * You can add your own observable properties with\n * `object.set('prop', 'value')`, and retrieve that with `object.get('prop')`.\n * You can listen for changes on that property value with\n * `object.on('change:prop', listener)`. You can get a list of all\n * properties with {@link module:ol/Object~BaseObject#getProperties}.\n *\n * Note that the observable properties are separate from standard JS properties.\n * You can, for example, give your map object a title with\n * `map.title='New title'` and with `map.set('title', 'Another title')`. The\n * first will be a `hasOwnProperty`; the second will appear in\n * `getProperties()`. Only the second is observable.\n *\n * Properties can be deleted by using the unset method. E.g.\n * object.unset('foo').\n *\n * @fires ObjectEvent\n * @api\n */\nvar BaseObject = /*@__PURE__*/(function (Observable) {\n  function BaseObject(opt_values) {\n    Observable.call(this);\n\n    // Call {@link module:ol/util~getUid} to ensure that the order of objects' ids is\n    // the same as the order in which they were created.  This also helps to\n    // ensure that object properties are always added in the same order, which\n    // helps many JavaScript engines generate faster code.\n    getUid(this);\n\n    /**\n     * @private\n     * @type {!Object<string, *>}\n     */\n    this.values_ = {};\n\n    if (opt_values !== undefined) {\n      this.setProperties(opt_values);\n    }\n  }\n\n  if ( Observable ) BaseObject.__proto__ = Observable;\n  BaseObject.prototype = Object.create( Observable && Observable.prototype );\n  BaseObject.prototype.constructor = BaseObject;\n\n  /**\n   * Gets a value.\n   * @param {string} key Key name.\n   * @return {*} Value.\n   * @api\n   */\n  BaseObject.prototype.get = function get (key) {\n    var value;\n    if (this.values_.hasOwnProperty(key)) {\n      value = this.values_[key];\n    }\n    return value;\n  };\n\n  /**\n   * Get a list of object property names.\n   * @return {Array<string>} List of property names.\n   * @api\n   */\n  BaseObject.prototype.getKeys = function getKeys () {\n    return Object.keys(this.values_);\n  };\n\n  /**\n   * Get an object of all property names and values.\n   * @return {Object<string, *>} Object.\n   * @api\n   */\n  BaseObject.prototype.getProperties = function getProperties () {\n    return assign({}, this.values_);\n  };\n\n  /**\n   * @param {string} key Key name.\n   * @param {*} oldValue Old value.\n   */\n  BaseObject.prototype.notify = function notify (key, oldValue) {\n    var eventType;\n    eventType = getChangeEventType(key);\n    this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));\n    eventType = ObjectEventType.PROPERTYCHANGE;\n    this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));\n  };\n\n  /**\n   * Sets a value.\n   * @param {string} key Key name.\n   * @param {*} value Value.\n   * @param {boolean=} opt_silent Update without triggering an event.\n   * @api\n   */\n  BaseObject.prototype.set = function set (key, value, opt_silent) {\n    if (opt_silent) {\n      this.values_[key] = value;\n    } else {\n      var oldValue = this.values_[key];\n      this.values_[key] = value;\n      if (oldValue !== value) {\n        this.notify(key, oldValue);\n      }\n    }\n  };\n\n  /**\n   * Sets a collection of key-value pairs.  Note that this changes any existing\n   * properties and adds new ones (it does not remove any existing properties).\n   * @param {Object<string, *>} values Values.\n   * @param {boolean=} opt_silent Update without triggering an event.\n   * @api\n   */\n  BaseObject.prototype.setProperties = function setProperties (values, opt_silent) {\n    for (var key in values) {\n      this.set(key, values[key], opt_silent);\n    }\n  };\n\n  /**\n   * Unsets a property.\n   * @param {string} key Key name.\n   * @param {boolean=} opt_silent Unset without triggering an event.\n   * @api\n   */\n  BaseObject.prototype.unset = function unset (key, opt_silent) {\n    if (key in this.values_) {\n      var oldValue = this.values_[key];\n      delete this.values_[key];\n      if (!opt_silent) {\n        this.notify(key, oldValue);\n      }\n    }\n  };\n\n  return BaseObject;\n}(Observable));\n\n\n/**\n * @type {Object<string, string>}\n */\nvar changeEventTypeCache = {};\n\n\n/**\n * @param {string} key Key name.\n * @return {string} Change name.\n */\nexport function getChangeEventType(key) {\n  return changeEventTypeCache.hasOwnProperty(key) ?\n    changeEventTypeCache[key] :\n    (changeEventTypeCache[key] = 'change:' + key);\n}\n\n\nexport default BaseObject;\n\n//# sourceMappingURL=Object.js.map"],"sourceRoot":""}